{"version":3,"sources":["assets/invalid.wav","images/help.svg","images/chat.svg","images/star.svg","images/pouch.svg","images/shuffle.svg","images/swap.svg","images/pass.svg","images/confirm.svg","images/stop.svg","assets/shuffle.wav","assets/placeTile.wav","assets/removeTile.wav","assets/correct.wav","images/ukflag.svg","images/deflag.svg","images/frflag.svg","images/tkflag.svg","components/Login.js","components/Header.js","components/Players.js","components/InviteScreen.js","components/UserBusy.js","components/Board.js","components/Tile.js","components/TileRack.js","components/Timer.js","utils/formatMilliseconds.js","components/StatusBar.js","components/Chat.js","components/GameButtons.js","components/ExchangeTilesButtons.js","components/ConfirmModal.js","assets/notifications.js","components/GameOverModal.js","components/ChatModal.js","utils/squaresAreOccupied.js","utils/findWordsOnBoard.js","utils/getTurnPoints.js","assets/bonusSquareIndices.js","components/GameScreen.js","utils/generateBoardSquares.js","utils/shuffle.js","utils/moveIsValid.js","utils/handleBlankTiles.js","components/NotificationModal.js","components/RulesModal.js","components/GameModeScreen.js","components/TitleScreen.js","components/LevelSelectScreen.js","App.js","index.js"],"names":["module","exports","Login","setCurrentComponent","setUser","socket","setPlayers","setInvitedPlayer","setGameId","setInviteSent","setCurrentPlayer","setGameData","setNotification","handleStart","lang","useEffect","userIdFromLS","localStorage","getItem","emit","token","on","data","removeItem","user","setGameOnSocket","game","player2","isConnected","invitedPlayer","currentPlayer","gameId","inGame","allOnlineUsers","filter","className","triggerOnce","onSubmit","e","preventDefault","name","target","value","console","log","setItem","u","reset","htmlFor","type","id","maxLength","onClick","Header","handleClickRules","handleClickChat","gameMode","newChatMsg","currentComponent","src","chatIcon","infoIcon","Players","players","useState","invite","setInvite","map","player","index","key","userToken","sendInvite","length","host","InviteScreen","inviteSent","timeInput","setTimeInput","onChange","time","UserBusy","Board","handleClickSquare","handleClickPlacedTile","boardState","isDisabled","square","placedTile","tile","bonusClassName","letterMultiplier","wordMultiplier","getBonusClassName","letter","toUpperCase","points","bonusText","getBonusText","Star","Tile","handleClickTile","tilesToExchange","selectedTile","tileSelected","item","getLetter","TileRack","playerRackTiles","turn","boardIsDisabled","Timer","interval","timeLeft","setTimeLeft","handleTimeOut","handleTimeWarning","timeWarning","playerTime","setPlayerTime","setInterval","clearInterval","ms","minutes","Math","floor","seconds","toFixed","formatMilliseconds","StatusBar","highestScoringWord","computerRackTiles","pouch","scores","timeLeftPlayer","timeLeftOpponent","setTimeLeftPlayer","setTimeLeftOpponent","timeOut","aiTiles","Pouch","word","Chat","mode","chatThread","handleSendMessage","message","playerName","date","playerFromBackend","msg","GameButtons","handleClickShuffle","handleClickConfirmMove","handleClickResign","handleClickPass","handleClickExchangeTiles","placedTiles","numPlacedTiles","shuffle","exchange","pass","confirm","resign","ExchangeTilesButtons","handleCancelExchange","handleConfirmExchange","ConfirmModal","confirmFunction","handleResign","handlePass","closeModal","setBlankTileLetter","setLetter","notifications","en","tr","de","fr","GameOverModal","playerText","returnToHomeScreen","outcome","endedBy","result","opponentName","hsw","playerScore","opponentScore","cascade","damping","ChatModal","squaresAreOccupied","indices","findWordsOnBoard","wordStart","newWord","words","letters","squares","checkSquare","dir","x","y","row","col","currentSquare","addWord","push","join","start","forEach","getTurnPoints","newWords","newPoints","turnHighScore","wordObj","wordMultipliers","wordPoints","reduce","total","bonusSquareIndices","doubleLetter","doubleWord","tripleLetter","tripleWord","GameScreen","gameData","viewChat","handleNewChatMsg","resetChatMsg","setGameMode","level","setSelectedTile","selectedSquareIndex","setSelectedSquareIndex","setPlayerRackTiles","setPlacedTiles","gameIsOver","setGameIsOver","confirmMessage","setConfirmMessage","setBoardState","0","1","setScores","wordsOnBoard","setWordsOnBoard","setHighestScoringWord","setTurn","setOutcome","setTilesToExchange","setBoardIsDisabled","consecutivePasses","setConsecutivePasses","computerConsecutivePasses","setComputerConsecutivePasses","setPouch","setComputerRackTiles","fillPouch","a","axios","post","res","now","require","moment","newMessage","setNewMessage","format","setChatThread","turnWords","setTurnWords","setTimeWarning","setEndedBy","blankTileLetter","useBeforeunload","getTiles","pouchCopy","newTilesHuman","slice","newTilesComputer","splice","computerMove","rackTiles","then","setTimeout","computerRackTilesCopy","nextPlayer","newBoardState","tilesUsed","turnPoints","playerPreviousPoints","updatedScores","newRackTiles","random","gameState","isOver","player1Tiles","player2Tiles","player1TimeLeft","player2TimeLeft","getBoard","placeTile","gameOver","wasBlank","placeTile2","gameEndedBy","exitGame","bonusSquares","Object","keys","newArray","sort","b","bonusIndices","obj","allSquares","i","includes","bonusSquare","find","generateBoardSquares","numTilesNeeded","rackToUpdate","newTiles","newScores","returnedTiles","currentPlayerTimeLeft","opponentTimeLeft","playSound","placeTileSound","tileToAdd","updatedBoardState","audioFile","Audio","play","getWordsOnBoard","tileToRemove","removeTileSound","handleClickClearTiles","placedTilesSquares","shuffleSound","shuffled","array","j","occupiedIndices","occupiedSquares","rowsAreSame","every","colsAreSame","alignment","alignmentOpposite","sortedSquares","firstSquare","lastSquare","indicesToCheck","tilesOnBoard","aboveAndBelowSquares","endSquares","adjacentSquares","occupiedAdjacentSquares","moveIsValid","handleBlankTiles","results","values","val","correctSound","checkedWords","invalidWords","invalidSound","placedTilesIndices","indexOf","idsToRemove","updatedRack","NotificationModal","notification","handleCloseNotificationModal","RulesModal","WelcomeScreen","handleChooseComputer","handleChooseOnline","setLangEn","setLangFr","setLangDe","setLangTr","TitleScreen","delay","LevelSelectScreen","handleChooseEasy","handleChooseNormal","handleChooseHard","App","setSocket","viewRules","setViewRules","setViewChat","setNewChatMsg","setLang","setLevel","io","GameModeScreen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fd9cbf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/invalid.e0d006dd.wav\";","module.exports = __webpack_public_path__ + \"static/media/help.2dce384a.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat.66639537.svg\";","module.exports = __webpack_public_path__ + \"static/media/star.beeebad2.svg\";","module.exports = __webpack_public_path__ + \"static/media/pouch.ee87ddc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/shuffle.2188ad5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/swap.fdd78fec.svg\";","module.exports = __webpack_public_path__ + \"static/media/pass.86ff50fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/confirm.1fbf1af4.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop.982692f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/shuffle.b913d0a3.wav\";","module.exports = __webpack_public_path__ + \"static/media/placeTile.59e742c6.wav\";","module.exports = __webpack_public_path__ + \"static/media/removeTile.bcde24aa.wav\";","module.exports = __webpack_public_path__ + \"static/media/correct.107e5d28.wav\";","module.exports = __webpack_public_path__ + \"static/media/ukflag.dbb2d233.svg\";","module.exports = __webpack_public_path__ + \"static/media/deflag.97f542f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/frflag.81465a1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/tkflag.ddcb73a0.svg\";","import React, { useEffect } from \"react\";\r\nimport \"../styles/Login.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst Login = ({\r\n  setCurrentComponent,\r\n  setUser,\r\n  socket,\r\n  setPlayers,\r\n  setInvitedPlayer,\r\n  setGameId,\r\n  setInviteSent,\r\n  setCurrentPlayer,\r\n  setGameData,\r\n  setNotification,\r\n  handleStart,\r\n  lang,\r\n}) => {\r\n  useEffect(() => {\r\n    const userIdFromLS = localStorage.getItem(\"token\");\r\n    if (userIdFromLS) {\r\n      socket.emit(\"retriveUser\", { token: userIdFromLS, lang: lang });\r\n      //backend does not recognize the token\r\n      socket.on(\"tokenError\", (data) => {\r\n        setCurrentComponent(\"Login\");\r\n        localStorage.removeItem(\"token\");\r\n        return;\r\n      });\r\n      socket.on(\"retrievdUser\", (data) => {\r\n        //found your previous session\r\n        setUser(data.user);\r\n        if (data.setGameOnSocket) {\r\n          //setup thhe game and return;\r\n          if (!data.game.player2.isConnected) {\r\n            //player 2 hasnt accepted yet\r\n            setGameId(data.game.gameId);\r\n            setInvitedPlayer(data.invitedPlayer);\r\n            setInviteSent(true);\r\n            setCurrentComponent(\"InviteScreen\");\r\n            return;\r\n          } else {\r\n            //SET BACK GAME\r\n            setInvitedPlayer(data.invitedPlayer);\r\n            setCurrentPlayer(data.currentPlayer);\r\n            setGameData(data.game);\r\n            setCurrentComponent(\"GameScreen\");\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (data.inGame) {\r\n          setCurrentComponent(\"UserBusy\");\r\n        } else {\r\n          setPlayers(\r\n            data.allOnlineUsers.filter((user) => {\r\n              return user.token != localStorage.getItem(\"token\");\r\n            })\r\n          );\r\n          setCurrentComponent(\"Players\");\r\n        }\r\n      });\r\n    } else setCurrentComponent(\"Login\");\r\n  }, []);\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.name.value;\r\n    socket.emit(\"username\", { name, lang });\r\n    socket.on(\"usernameError\", (data) => {\r\n      console.log(data);\r\n      setNotification(data);\r\n      return;\r\n    });\r\n    socket.on(\"usernameRegistered\", (data) => {\r\n      console.log(data);\r\n      const user = data.user;\r\n      localStorage.setItem(\"token\", data.token);\r\n      setUser(user);\r\n      setPlayers(\r\n        data.allOnlineUsers.filter((u) => {\r\n          return u.token != localStorage.getItem(\"token\");\r\n        })\r\n      );\r\n      setCurrentComponent(\"Players\");\r\n    });\r\n\r\n    e.target.reset();\r\n  };\r\n  return (\r\n    <Fade className=\"login__container\" triggerOnce>\r\n      <div className=\"login__wrapper\">\r\n        <h2>\r\n          {lang === \"en\" && \"Login\"}\r\n          {lang === \"tr\" && \"Giriş\"}\r\n          {lang === \"fr\" && \"S'identifier\"}\r\n          {lang === \"de\" && \"Anmeldung\"}\r\n        </h2>\r\n        <form className=\"login__form\" onSubmit={handleLogin}>\r\n          <label htmlFor=\"name\">\r\n            {lang === \"en\" && \"Your name:\"}\r\n            {lang === \"tr\" && \"Adınız:\"}\r\n            {lang === \"fr\" && \"Votre nom:\"}\r\n            {lang === \"de\" && \"Dein Name:\"}\r\n          </label>\r\n          <input type=\"text\" id=\"name\" maxLength=\"12\" />\r\n          <button type=\"submit\">\r\n            {lang === \"en\" && \"Login\"}\r\n            {lang === \"tr\" && \"Giriş\"}\r\n            {lang === \"fr\" && \"S'identifier\"}\r\n            {lang === \"de\" && \"Anmeldung\"}\r\n          </button>\r\n          <button className=\"\" onClick={handleStart}>\r\n            {lang === \"en\" && \"Back\"}\r\n            {lang === \"tr\" && \"Geri git\"}\r\n            {lang === \"fr\" && \"Retourner\"}\r\n            {lang === \"de\" && \"Geh zurück\"}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"../styles/Header.css\";\r\nimport infoIcon from \"../images/help.svg\";\r\nimport chatIcon from \"../images/chat.svg\";\r\nimport {HeartBeat} from \"react-awesome-reveal\";\r\n\r\nconst Header = ({ handleClickRules, handleClickChat, gameMode, handleStart, newChatMsg, currentComponent }) => {\r\n  return (\r\n    <div className=\"header__wrapper\">\r\n      {gameMode === \"Online\" && currentComponent === \"GameScreen\" && (\r\n        <div className=\"header__chat\" onClick={handleClickChat}>\r\n          {newChatMsg && <HeartBeat triggerOnce><div className=\"newMsg\"></div></HeartBeat>}\r\n          <img src={chatIcon} />\r\n        </div>\r\n      )}\r\n      <div className=\"header__title\"><h1 onClick={currentComponent !== \"GameScreen\" ? handleStart : null}>Skrabl</h1></div>\r\n      <div className=\"header__rules\" onClick={handleClickRules}>\r\n        <img src={infoIcon} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Players.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst Players = ({\r\n  players,\r\n  setPlayers,\r\n  socket,\r\n  user,\r\n  setCurrentComponent,\r\n  setInvitedPlayer,\r\n  setGameId,\r\n  setNotification,\r\n  setGameData,\r\n  setCurrentPlayer,\r\n  handleStart,\r\n  lang,\r\n}) => {\r\n  let [invite, setInvite] = useState(\"\");\r\n  socket.on(\"invite\", (data) => {\r\n    setInvite(data);\r\n  });\r\n  const acceptInvite = () => {\r\n    socket.emit(\"inviteAccepted\", {\r\n      token: user.token,\r\n      gameId: invite.game.gameId,\r\n    });\r\n    socket.on(\"2joinGameError\", (data) => {\r\n      console.log(data);\r\n    });\r\n    socket.on(\"gameJoined2\", (data) => {\r\n      console.log(data);\r\n      setCurrentPlayer(1);\r\n      setGameData(data.game);\r\n      setInvitedPlayer(invite.host);\r\n      setCurrentComponent(\"GameScreen\");\r\n    });\r\n  };\r\n\r\n  socket.on(\"welcomeNewUser\", (data) => {\r\n    if (data.token == localStorage.getItem(\"token\")) return;\r\n    setPlayers([...players, data]);\r\n  });\r\n\r\n  socket.on(\"userLeft\", (user) => {\r\n    console.log(\"a user left\" + user);\r\n    setPlayers(players.filter((u) => u.token != user.token));\r\n  });\r\n\r\n  const sendInvite = (player) => {\r\n    socket.emit(\"playerInGame\", player);\r\n    socket.on(\"playerUnavailable\", (data) => {\r\n      console.log(data);\r\n      if (data === true) {\r\n        setNotification(\"Player is in another game\");\r\n        return;\r\n      } else {\r\n        socket.emit(\"createGame\", { userToken: user.token, lang: lang });\r\n        //invalid userId on create game\r\n        socket.on(\"createGameError\", (data) => {\r\n          console.log(data);\r\n          return;\r\n        });\r\n        socket.on(\"gameCreateResponse\", (data) => {\r\n          console.log(\"the game Id got back: \" + data);\r\n          setGameId(data);\r\n          setInvitedPlayer(player);\r\n          setCurrentComponent(\"InviteScreen\");\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fade triggerOnce>\r\n      <div className=\"players__wrapper\">\r\n        <h3>\r\n          {lang === \"en\" && \"Players online\"}\r\n          {lang === \"tr\" && \"Çevrimiçi oyuncular\"}\r\n          {lang === \"fr\" && \"Joueurs en ligne \"}\r\n          {lang === \"de\" && \"Spieler online\"}\r\n        </h3>\r\n        {lang === \"en\" && \"Click on a player to invite them for a game.\"}\r\n        {lang === \"tr\" && \"Bir oyuna davet etmek için bir oyuncuyu tıklay.\"}\r\n        {lang === \"fr\" && \"Cliquez sur un joueur pour l'inviter à une partie.\"}\r\n        {lang === \"de\" &&\r\n          \"Klicken Sie auf einen Spieler, um ihn zu einem Spiel einzuladen.\"}\r\n        <ul className=\"players__list\">\r\n          {players.map((player, index) => {\r\n            return (\r\n              <li\r\n                key={index}\r\n                value={player}\r\n                onClick={() => {\r\n                  sendInvite(player);\r\n                }}\r\n                className=\"players__player\"\r\n              >\r\n                {player.name}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        {players.length < 1 && (\r\n          <>\r\n            <p>\r\n              {lang === \"en\" && \"No one's online at the moment.\"}\r\n              {lang === \"tr\" && \"Şu anda kimse çevrimiçi değil.\"}\r\n              {lang === \"fr\" && \"Personne n'est en ligne pour le moment.\"}\r\n              {lang === \"de\" && \"Im Moment ist niemand online.\"}\r\n            </p>\r\n            <button className=\"return__button\" onClick={handleStart}>\r\n              {lang === \"en\" && \"Back to main menu\"}\r\n              {lang === \"tr\" && \"Ana menüye geri git\"}\r\n              {lang === \"fr\" && \"Retour au menu principal\"}\r\n              {lang === \"de\" && \"Zurück zum Hauptmenü\"}\r\n            </button>\r\n          </>\r\n        )}\r\n        {invite !== \"\" && (\r\n          <div className=\"player__invitations\">\r\n            <h3>\r\n              {lang === \"en\" && \"Incoming invitations\"}\r\n              {lang === \"tr\" && \"Gelen davetler\"}\r\n              {lang === \"fr\" && \"Invitations entrantes\"}\r\n              {lang === \"de\" && \"Eingehende Einladungen\"}\r\n            </h3>\r\n            <div className=\"player__invite-request\">\r\n              <p>\r\n                {invite.host.name} {lang === \"en\" && \"sent you a game request.\"}\r\n                {lang === \"tr\" && \"sana bir oyun daveti gönderdi.\"}\r\n                {lang === \"fr\" && \"vous a envoyé une demande de jeu.\"}\r\n                {lang === \"de\" && \"hat dir eine Spielanfrage geschickt.\"}\r\n              </p>\r\n              <button onClick={acceptInvite}>Click to accept</button>\r\n              <button className=\"return__button\" onClick={handleStart}>\r\n                {lang === \"en\" && \"Back to main menu\"}\r\n                {lang === \"tr\" && \"Ana menüye geri git\"}\r\n                {lang === \"fr\" && \"Retour au menu principal\"}\r\n                {lang === \"de\" && \"Zurück zum Hauptmenü\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default Players;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/InviteScreen.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst InviteScreen = ({\r\n  user,\r\n  setInvitedPlayer,\r\n  setCurrentComponent,\r\n  invitedPlayer,\r\n  gameId,\r\n  setGameData,\r\n  socket,\r\n  setCurrentPlayer,\r\n  inviteSent,\r\n  setInviteSent,\r\n  lang,\r\n}) => {\r\n  const [timeInput, setTimeInput] = useState(20);\r\n\r\n  let [invite, setInvite] = useState(\"\");\r\n\r\n  const handleTimeChange = (e) => {\r\n    setTimeInput(e.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    socket.emit(\"removeGame\", gameId);\r\n    socket.on(\"removedGame\", (data) => {\r\n      console.log(data);\r\n      setInvitedPlayer(\"\");\r\n      setCurrentComponent(\"Players\");\r\n    });\r\n  };\r\n\r\n  socket.on(\"gameJoined2\", (data) => {\r\n    if (invite === \"\") {\r\n      setCurrentPlayer(0);\r\n      setGameData(data.game);\r\n      setCurrentComponent(\"GameScreen\");\r\n    } else {\r\n      setCurrentPlayer(1);\r\n      setGameData(data.game);\r\n      setInvitedPlayer(invite.host);\r\n      setCurrentComponent(\"GameScreen\");\r\n    }\r\n  });\r\n\r\n  socket.on(\"invite\", (data) => {\r\n    setInvite(data);\r\n  });\r\n  const acceptInvite = () => {\r\n    setInvite(\"\");\r\n    socket.emit(\"inviteAccepted\", {\r\n      token: user.token,\r\n      gameId: invite.game.gameId,\r\n    });\r\n    socket.on(\"2joinGameError\", (data) => {\r\n      console.log(data);\r\n    });\r\n    socket.on(\"gameJoined2\", (data) => {\r\n      console.log(data);\r\n      setCurrentPlayer(1);\r\n      setGameData(data.game);\r\n      setInvitedPlayer(invite.host);\r\n      setCurrentComponent(\"GameScreen\");\r\n    });\r\n  };\r\n\r\n  const handleApplyOptions = () => {\r\n    setInviteSent(true);\r\n    //request to join game\r\n    socket.emit(\"joinGame\", {\r\n      token: user.token,\r\n      gameId: gameId,\r\n      time: timeInput,\r\n    });\r\n\r\n    //add notifications here and setDisplayedComponentBack\r\n    socket.on(\"joinGameError\", (data) => {\r\n      console.log(data);\r\n      setInviteSent(false);\r\n      setCurrentComponent = \"Players\";\r\n    });\r\n\r\n    //on succesful game join\r\n    socket.on(\"gameJoined\", (data) => {\r\n      console.log(data);\r\n      setInviteSent(true);\r\n      socket.emit(\"gameRequest\", {\r\n        token: user.token,\r\n        gameId: gameId,\r\n        invitedPlayer: invitedPlayer,\r\n      });\r\n      socket.on(\"gameRequestError\", (data) => {\r\n        //should remove game from uId in backend too\r\n        console.log(data);\r\n        setInviteSent(false);\r\n        setCurrentComponent = \"Players\";\r\n      });\r\n      socket.on(\"gameJoined2\", (data) => {\r\n        setCurrentPlayer(0);\r\n        setGameData(data.game);\r\n        setCurrentComponent(\"GameScreen\");\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fade triggerOnce>\r\n      <div className=\"inviteScreen__wrapper\">\r\n        <h3>\r\n          {lang === \"en\" && \"You are inviting:\"}\r\n          {lang === \"tr\" && \"Davet ettiğin kişi:\"}\r\n          {lang === \"fr\" && \"Vous invitez:\"}\r\n          {lang === \"de\" && \"Sie laden ein:\"}\r\n          {invitedPlayer.name}\r\n        </h3>\r\n        <div className=\"inviteScreen__list\">\r\n          {!inviteSent && (\r\n            <div className=\"inviteScreen__option\">\r\n              <label htmlFor=\"time\">\r\n                {lang === \"en\" && \"Time per player per game (mins):\"}\r\n                {lang === \"tr\" && \"Oyunda oyuncu başına süre (dakika):\"}\r\n                {lang === \"fr\" && \"Temps par joueur et par partie (minutes):\"}\r\n                {lang === \"de\" && \"Zeit pro Spieler und Spiel (Minuten):\"}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"time\"\r\n                value={timeInput}\r\n                onChange={handleTimeChange}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"inviteScreen__buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            {lang === \"en\" && \"Cancel\"}\r\n            {lang === \"tr\" && \"Iptal\"}\r\n            {lang === \"fr\" && \"Annuler\"}\r\n            {lang === \"de\" && \"Stornieren \"}\r\n          </button>\r\n\r\n          {!inviteSent && (\r\n            <button type=\"button\" onClick={handleApplyOptions}>\r\n              {lang === \"en\" && \"Send invite\"}\r\n              {lang === \"tr\" && \"Daveti gönder\"}\r\n              {lang === \"fr\" && \"Envoyer invitation\"}\r\n              {lang === \"de\" && \"Senden Einladung\"}\r\n            </button>\r\n          )}\r\n\r\n          {inviteSent && (\r\n            <p>\r\n              {lang === \"en\" && \"Waiting for player to accept invite.\"}\r\n              {lang === \"tr\" && \"Oyuncunun daveti kabul etmesi bekleniyor.\"}\r\n              {lang === \"fr\" &&\r\n                \"En attente de l'acceptation de l'invitation par le joueur.\"}\r\n              {lang === \"de\" &&\r\n                \"Warten auf die Annahme der Einladung durch den Spieler. \"}\r\n            </p>\r\n          )}\r\n          {invite !== \"\" && (\r\n            <div>\r\n              <p>\r\n                {invite.host.name} {lang === \"en\" && \"sent you a game request.\"}\r\n                {lang === \"tr\" && \"sana bir oyun daveti gönderdi.\"}\r\n                {lang === \"fr\" && \"vous a envoyé une demande de jeu.\"}\r\n                {lang === \"de\" && \"hat dir eine Spielanfrage geschickt.\"}\r\n              </p>\r\n              <button onClick={acceptInvite}>\r\n                {invite.host.name} {lang === \"en\" && \"Click to accept\"}\r\n                {lang === \"tr\" && \"Kabul etmek için tıklay\"}\r\n                {lang === \"fr\" && \"Cliquez pour accepter\"}\r\n                {lang === \"de\" && \"Klicken Sie zum Akzeptieren\"}\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default InviteScreen;\r\n","import React from \"react\";\r\n\r\nconst UserBusy = ({ socket, lang }) => {\r\n  socket.on(\"retrivedGame\", (data) => {\r\n    console.log(data);\r\n  });\r\n\r\n  //retrived game setup\r\n  //join it to game room when sent back\r\n  return (\r\n    <div>\r\n      <h5>\r\n        {lang === \"en\" && \"You are already in a game.\"}\r\n        {lang === \"tr\" && \"Zaten bir oyundasın.\"}\r\n        {lang === \"fr\" && \"Vous êtes déjà dans un jeu.\"}\r\n        {lang === \"de\" && \"Du bist schon in einem Spiel.\"}\r\n      </h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserBusy;\r\n","import React from \"react\";\r\nimport \"../styles/Board.css\";\r\nimport Star from \"../images/star.svg\";\r\n\r\nconst getBonusClassName = (square) => {\r\n  let bonusClassName = \"\";\r\n\r\n  switch (square.letterMultiplier) {\r\n    case 2:\r\n      bonusClassName = \"double-letter\";\r\n      break;\r\n    case 3:\r\n      bonusClassName = \"triple-letter\";\r\n      break;\r\n    default:\r\n      bonusClassName = bonusClassName;\r\n  }\r\n  switch (square.wordMultiplier) {\r\n    case 2:\r\n      bonusClassName = \"double-word\";\r\n      break;\r\n    case 3:\r\n      bonusClassName = \"triple-word\";\r\n      break;\r\n    default:\r\n      bonusClassName = bonusClassName;\r\n  }\r\n\r\n  return bonusClassName;\r\n};\r\n\r\nconst getBonusText = (square) => {\r\n  let bonusText = \"\";\r\n  switch (square.letterMultiplier) {\r\n    case 2:\r\n      bonusText = \"2L\";\r\n      break;\r\n    case 3:\r\n      bonusText = \"3L\";\r\n      break;\r\n    default:\r\n      bonusText = bonusText;\r\n  }\r\n  switch (square.wordMultiplier) {\r\n    case 2:\r\n      bonusText = \"2W\";\r\n      break;\r\n    case 3:\r\n      bonusText = \"3W\";\r\n      break;\r\n    default:\r\n      bonusText = bonusText;\r\n  }\r\n  if (square.index === 112) {\r\n    bonusText = '';\r\n  }\r\n  return bonusText;\r\n};\r\n\r\nconst Board = ({\r\n  handleClickSquare,\r\n  handleClickPlacedTile,\r\n  boardState,\r\n  isDisabled,\r\n  lang,\r\n}) => {\r\n  const getLetter = (tile) => {\r\n    let letter;\r\n    if (lang === \"tr\" && tile.letter === \"i\") {\r\n      letter = \"İ\";\r\n    } else if (lang === \"tr\" && tile.letter === \"ı\") {\r\n      letter = \"I\";\r\n    } else {\r\n      letter = tile.letter.toUpperCase();\r\n    }\r\n    return letter;\r\n  };\r\n\r\n  return (\r\n    <div className=\"board__wrapper\">\r\n      <div className={\"board__board \" + (isDisabled ? \"disabled\" : \"\")}>\r\n        {boardState &&\r\n          boardState.length > 0 &&\r\n          boardState.map((square, index) => { \r\n            const bonusClassName = getBonusClassName(square); \r\n            let placedTile;\r\n            if (square.tile) {\r\n              placedTile = (\r\n                <span\r\n                  className=\"board__tile\"\r\n                  onClick={() => handleClickPlacedTile(square.tile)}\r\n                >\r\n                  <span>{getLetter(square.tile)}</span>\r\n                  <span className=\"tile__points--sm\">{square.tile.points}</span>\r\n                </span>\r\n              );\r\n            }\r\n            return (\r\n              <div\r\n                className={`board__square ${bonusClassName} ${\r\n                  index === 112 && \"board__centre\"\r\n                }`}\r\n                key={index}\r\n                onClick={(e) => handleClickSquare(square)}\r\n              >\r\n                {!placedTile && (\r\n                  <span className=\"board__bonus-text\">\r\n                    {getBonusText(square)}\r\n                  </span>\r\n                )}\r\n                {!placedTile && index === 112 && (\r\n                  <img className=\"center__star\" src={Star} />\r\n                )}\r\n                {placedTile && placedTile}\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"../styles/Tile.css\";\r\n\r\nconst Tile = ({\r\n  tile,\r\n  handleClickTile,\r\n  tilesToExchange,\r\n  selectedTile,\r\n  lang,\r\n}) => {\r\n  const tileSelected =\r\n    tilesToExchange.filter((item) => item.id === tile.id).length > 0 ||\r\n    selectedTile === tile\r\n      ? true\r\n      : false;\r\n\r\n  const getLetter = (tile) => {\r\n    let letter;\r\n    if (lang === \"tr\" && tile.letter === \"i\") {\r\n      letter = \"İ\";\r\n    } else if (lang === \"tr\" && tile.letter === \"ı\") {\r\n      letter = \"I\";\r\n    } else {\r\n      letter = tile.letter.toUpperCase();\r\n    }\r\n    return letter;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        tileSelected ? \"tile__wrapper tile__wrapper--selected\" : \"tile__wrapper\"\r\n      }\r\n      onClick={() => handleClickTile(tile)}\r\n    >\r\n      <span className=\"tile__letter\">{getLetter(tile)}</span>\r\n      <span className=\"tile__points\">{tile.points}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;","import React from \"react\";\r\nimport Tile from \"../components/Tile\";\r\nimport \"../styles/TileRack.css\";\r\n\r\nconst TileRack = ({\r\n  playerRackTiles,\r\n  handleClickTile,\r\n  tilesToExchange,\r\n  selectedTile,\r\n  lang,\r\n  turn,\r\n  boardIsDisabled,\r\n}) => {\r\n  return (\r\n    <div className=\"tileRack__wrapper\">\r\n      {playerRackTiles &&\r\n        playerRackTiles.length > 0 &&\r\n        playerRackTiles.map((tile, index) => (\r\n          <div className=\"tileRack__tile\" key={index}>\r\n            <Tile\r\n              tile={tile}\r\n              handleClickTile={handleClickTile}\r\n              tilesToExchange={tilesToExchange}\r\n              selectedTile={selectedTile}\r\n              lang={lang}\r\n              turn={turn}\r\n              boardIsDisabled={boardIsDisabled}\r\n            />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileRack;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { formatMilliseconds } from \"../utils/formatMilliseconds\";\r\nimport \"../styles/Timer.css\";\r\n\r\nconst Timer = ({\r\n  timeLeft,\r\n  setTimeLeft,\r\n  currentPlayer,\r\n  turn,\r\n  handleTimeOut,\r\n  handleTimeWarning,\r\n  timeWarning,\r\n  lang,\r\n}) => {\r\n  let interval;\r\n  const [playerTime, setPlayerTime] = useState(timeLeft);\r\n\r\n  useEffect(() => {\r\n    if (currentPlayer === turn) {\r\n      interval = setInterval(() => {\r\n        setPlayerTime(playerTime - 1 / 60);\r\n      }, 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [turn, playerTime]);\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(playerTime);\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    if (playerTime < 0.01) {\r\n      handleTimeOut();\r\n      clearInterval(interval);\r\n    }\r\n    if (playerTime < 1) {\r\n      handleTimeWarning();\r\n    }\r\n  }, [playerTime]);\r\n\r\n  return (\r\n    <div className=\"timer__wrapper\">\r\n      {lang === \"en\" && \"Time:\"}\r\n      {lang === \"tr\" && \"Süre:\"}\r\n      {lang === \"fr\" && \"Temps:\"}\r\n      {lang === \"de\" && \"Zeit:\"}&nbsp;&nbsp;&nbsp;&nbsp;\r\n      <div className={timeWarning ? \"timer__time warning\" : \"timer__time\"}>\r\n        {formatMilliseconds(playerTime * 60 * 1000)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","export const formatMilliseconds = (ms) => {\r\n  const minutes = Math.floor(ms / 60000);\r\n  const seconds = ((ms % 60000) / 1000).toFixed(0);\r\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n};\r\n","import React from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport \"../styles/StatusBar.css\";\r\nimport Pouch from \"../images/pouch.svg\";\r\n\r\nconst StatusBar = ({\r\n  highestScoringWord,\r\n  computerRackTiles,\r\n  pouch,\r\n  user,\r\n  invitedPlayer,\r\n  scores,\r\n  setNotification,\r\n  timeLeftPlayer,\r\n  timeLeftOpponent,\r\n  setTimeLeftPlayer,\r\n  setTimeLeftOpponent,\r\n  currentPlayer,\r\n  turn,\r\n  gameMode,\r\n  timeOut,\r\n  handleTimeOut,\r\n  timeWarning,\r\n  handleTimeWarning,\r\n  lang,\r\n}) => {\r\n  const aiTiles = computerRackTiles.map((tile) => {\r\n    return (\r\n      <div key={tile.id} className=\"aiTile\">\r\n        {tile.letter.toUpperCase()}\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"statusBar__frame\">\r\n      <div className=\"statusBar__wrapper\">\r\n        <div className=\"statusBar__reverse\">\r\n          <div className=\"pouchInfo\">\r\n            <div className=\"pouch\">\r\n              <img className=\"pouchIcon\" src={Pouch} />\r\n              <div className=\"tileCounter\">{pouch.length}</div>\r\n            </div>\r\n          </div>\r\n          {gameMode === \"Computer\" && (\r\n            <div className=\"rackInfo\">\r\n              <h3>\r\n                {lang === \"en\" && \"SkrablBot's tiles\"}\r\n                {lang === \"tr\" && \"SkrablBot'un harf taşları\"}\r\n                {lang === \"fr\" && \"Pions de SkrablBot\"}\r\n                {lang === \"de\" && \"SkrablBots Buchstabensteine\"}\r\n              </h3>\r\n              <div className=\"aiRack\">{aiTiles}</div>\r\n            </div>\r\n          )}\r\n          {gameMode === \"Online\" && (\r\n            <div className=\"rackInfo\">\r\n              <h3>\r\n                {lang === \"en\" && \"Highest scoring word\"}\r\n                {lang === \"tr\" && \"En yüksek puan alan kelime\"}\r\n                {lang === \"fr\" && \"Mot ayant obtenu le meilleur score\"}\r\n                {lang === \"de\" && \"Wort mit der höchsten Punktzahl\"}\r\n              </h3>\r\n              {highestScoringWord.word.length > 0 && (\r\n                <div className=\"hiScore\">{`'${highestScoringWord.word.toUpperCase()}' - ${\r\n                  highestScoringWord.points\r\n                }pts`}</div>\r\n              )}\r\n              {highestScoringWord.word.length === 0 && (\r\n                <div className=\"hiScore\">{`...`}</div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div\r\n          className={\r\n            turn === currentPlayer\r\n              ? \"statusBar__player player__active\"\r\n              : \"statusBar__player\"\r\n          }\r\n        >\r\n          <div className=\"player__name\">\r\n            {gameMode === \"Computer\" && lang === \"en\" && \"Player\"}\r\n            {gameMode === \"Computer\" && lang === \"tr\" && \"Oyuncu\"}\r\n            {gameMode === \"Computer\" && lang === \"fr\" && \"Joueur\"}\r\n            {gameMode === \"Computer\" && lang === \"de\" && \"Spieler\"}\r\n            {gameMode === \"Online\" && user.name}\r\n          </div>\r\n          <div className=\"player__time\">\r\n            <Timer\r\n              setNotification={setNotification}\r\n              timeLeft={timeLeftPlayer}\r\n              setTimeLeft={setTimeLeftPlayer}\r\n              currentPlayer={currentPlayer}\r\n              turn={turn}\r\n              timeOut={timeOut}\r\n              handleTimeOut={handleTimeOut}\r\n              handleTimeWarning={handleTimeWarning}\r\n              timeWarning={timeWarning}\r\n              lang={lang}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"player__score\">\r\n            {lang === \"en\" && \"Score:\"}\r\n            {lang === \"tr\" && \"Skor:\"}\r\n            {lang === \"fr\" && \"Score:\"}\r\n            {lang === \"de\" && \"Punktzahl:\"}&nbsp;&nbsp;&nbsp;{\" \"}\r\n            {scores && scores[currentPlayer == 1 ? 1 : 0]}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={\r\n            turn !== currentPlayer\r\n              ? \"statusBar__player opponent__active\"\r\n              : \"statusBar__player\"\r\n          }\r\n        >\r\n          <div className=\"player__name\">\r\n            {gameMode === \"Computer\" && \"SkrablBot\"}\r\n            {gameMode === \"Online\" && invitedPlayer && invitedPlayer.name}\r\n          </div>\r\n          <div className=\"player__time\">\r\n            <Timer\r\n              setNotification={setNotification}\r\n              timeLeft={timeLeftOpponent}\r\n              setTimeLeft={setTimeLeftOpponent}\r\n              currentPlayer={currentPlayer == 1 ? 0 : 1}\r\n              turn={turn}\r\n              lang={lang}\r\n            />\r\n          </div>\r\n          <div className=\"player__score\">\r\n            {lang === \"en\" && \"Score:\"}\r\n            {lang === \"tr\" && \"Skor:\"}\r\n            {lang === \"fr\" && \"Score:\"}\r\n            {lang === \"de\" && \"Punktzahl:\"}&nbsp;&nbsp;&nbsp;{\" \"}\r\n            {scores && scores[currentPlayer == 1 ? 0 : 1]}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusBar;\r\n","import React from \"react\";\r\nimport \"../styles/Chat.css\";\r\n\r\nconst Chat = ({ currentPlayer, mode, chatThread, handleSendMessage, lang }) => {\r\n  return (\r\n    <div className={mode === \"modal\" ? \"chat__wrapper modal\" : \"chat__wrapper\"}>\r\n      <ul className=\"chat__list\">\r\n        {chatThread.map((message, index) => (\r\n          <li className=\"chat__message\" key={index}>\r\n            <h5>{message.playerName}: </h5>\r\n            <p className=\"timeStamp\">{message.date}</p>\r\n            <p\r\n              className={\r\n                message.playerFromBackend === currentPlayer ? \"host\" : \"guest\"\r\n              }\r\n            >\r\n              {message.msg}\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={handleSendMessage}>\r\n        <input type=\"text\" name=\"message\" />\r\n        <button type=\"submit\">\r\n          {lang === \"en\" && \"Send\"}\r\n          {lang === \"tr\" && \"Gönder\"}\r\n          {lang === \"fr\" && \"Envoyer\"}\r\n          {lang === \"de\" && \"Senden\"}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport \"../styles/GameButtons.css\";\r\nimport shuffle from \"../images/shuffle.svg\";\r\nimport exchange from \"../images/swap.svg\";\r\nimport pass from \"../images/pass.svg\";\r\nimport confirm from \"../images/confirm.svg\";\r\nimport resign from \"../images/stop.svg\";\r\n\r\nconst GameButtons = ({\r\n  handleClickShuffle,\r\n  handleClickConfirmMove,\r\n  handleClickResign,\r\n  handleClickPass,\r\n  handleClickExchangeTiles,\r\n  placedTiles,\r\n  lang,\r\n}) => {\r\n  const numPlacedTiles = placedTiles.length;\r\n  return (\r\n    <div className=\"gameButtons__wrapper\">\r\n      <button onClick={handleClickShuffle}>\r\n        <div className=\"button__text\">\r\n          <img className=\"button__icon\" src={shuffle} />\r\n          {lang === \"en\" && \"Shuffle\"}\r\n          {lang === \"tr\" && \"Karıştır\"}\r\n          {lang === \"fr\" && \"Mélanger\"}\r\n          {lang === \"de\" && \"Mische \"}\r\n        </div>\r\n      </button>\r\n      <button onClick={handleClickExchangeTiles}>\r\n        <div className=\"button__text\">\r\n          <img className=\"button__icon\" src={exchange} />\r\n          {lang === \"en\" && \"Swap\"}\r\n          {lang === \"tr\" && \"Değiştir\"}\r\n          {lang === \"fr\" && \"Changer\"}\r\n          {lang === \"de\" && \"Wechseln \"}\r\n        </div>\r\n      </button>\r\n      {numPlacedTiles === 0 && (\r\n        <button onClick={handleClickPass}>\r\n          <div className=\"button__text\">\r\n            <img className=\"button__icon\" src={pass} />\r\n            {lang === \"en\" && \"Pass\"}\r\n            {lang === \"tr\" && \"Pas geç\"}\r\n            {lang === \"fr\" && \"Passer\"}\r\n            {lang === \"de\" && \"Passe \"}\r\n          </div>\r\n        </button>\r\n      )}\r\n      {numPlacedTiles > 0 && (\r\n        <button onClick={handleClickConfirmMove}>\r\n          <div className=\"button__text\">\r\n            <img className=\"button__icon\" src={confirm} />\r\n            {lang === \"en\" && \"Confirm\"}\r\n            {lang === \"tr\" && \"Onayla\"}\r\n            {lang === \"fr\" && \"Confirmer\"}\r\n            {lang === \"de\" && \"Bestätigen \"}\r\n          </div>\r\n        </button>\r\n      )}\r\n      <button onClick={handleClickResign}>\r\n        <div className=\"button__text\">\r\n          <img className=\"button__icon\" src={resign} />\r\n          {lang === \"en\" && \"Resign\"}\r\n          {lang === \"tr\" && \"Teslim ol\"}\r\n          {lang === \"fr\" && \"Abandonner\"}\r\n          {lang === \"de\" && \"Gib auf \"}\r\n        </div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameButtons;\r\n","import React from \"react\";\r\nimport \"../styles/GameButtons.css\";\r\n\r\nconst ExchangeTilesButtons = ({\r\n  handleCancelExchange,\r\n  handleConfirmExchange,\r\n  lang,\r\n}) => {\r\n  return (\r\n    <div className=\"gameButtons__wrapper\">\r\n      <button\r\n        className=\"button__cancel button__exchange\"\r\n        onClick={handleCancelExchange}\r\n      >\r\n        <div className=\"\">\r\n          {lang === \"en\" && \"Cancel\"}\r\n          {lang === \"tr\" && \"Iptal\"}\r\n          {lang === \"fr\" && \"Annuler\"}\r\n          {lang === \"de\" && \"Stornieren \"}\r\n        </div>\r\n      </button>\r\n      <button\r\n        className=\"button__confirm button__exchange\"\r\n        onClick={handleConfirmExchange}\r\n      >\r\n        <div className=\"\">\r\n          {lang === \"en\" && \"Confirm\"}\r\n          {lang === \"tr\" && \"Onayla\"}\r\n          {lang === \"fr\" && \"Confirmer\"}\r\n          {lang === \"de\" && \"Bestätigen \"}\r\n        </div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExchangeTilesButtons;\r\n","import React, {useState} from \"react\";\r\nimport \"../styles/ConfirmModal.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst ConfirmModal = ({\r\n  message,\r\n  handleResign,\r\n  handlePass,\r\n  closeModal,\r\n  setBlankTileLetter,\r\n  lang\r\n}) => {\r\n  let confirmFunction;\r\n\r\n  const [letter, setLetter]= useState(\"\")\r\n\r\n  // message.type === \"resign\"\r\n  //   ? (confirmFunction = handleResign)\r\n  //   : (confirmFunction = handlePass);\r\n\r\n  const handleBlankTile = () => {\r\n    if (letter === \"\") return;\r\n    setBlankTileLetter(letter)\r\n    closeModal();\r\n  }\r\n\r\n\r\n  switch (message.type) {\r\n    case \"resign\":\r\n      confirmFunction = handleResign;\r\n      break;\r\n\r\n    case \"pass\":\r\n      confirmFunction = handlePass;\r\n      break;\r\n\r\n    case \"blankTile\":\r\n      confirmFunction = handleBlankTile;\r\n      break;\r\n    \r\n    default:\r\n      return;\r\n  }\r\n\r\n\r\n  \r\n  return (\r\n    <Fade triggerOnce className=\"confirmModal__wrapper\">\r\n      <div className=\"confirmModal__content\">\r\n        <p>{message.message}</p>\r\n        {message.type === \"blankTile\" && \r\n        <input maxLength={1} onChange={(e) => setLetter(e.target.value)}></input>\r\n        }\r\n        <div className=\"confirmModal__buttons\">\r\n          <button className=\"button__confirm\" onClick={confirmFunction}>\r\n            {lang === \"en\" && \"Confirm\"}\r\n            {lang === \"tr\" && \"Onayla\"}\r\n            {lang === \"fr\" && \"Confirmer\"}\r\n            {lang === \"de\" && \"Bestätigen \"}\r\n          </button>\r\n          <button className=\"button__cancel\" onClick={closeModal}>\r\n            {lang === \"en\" && \"Cancel\"}\r\n            {lang === \"tr\" && \"Iptal\"}\r\n            {lang === \"fr\" && \"Annuler\"}\r\n            {lang === \"de\" && \"Stornieren \"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default ConfirmModal;\r\n","export const notifications = {\r\n  \"Welcome, you are now connected.\": {\r\n    en: \"Welcome, you are now connected.\",\r\n    tr: \"Hoş geldin, bağlandın.\",\r\n    de: \"Willkommen, Sie sind jetzt verbunden.\",\r\n    fr: \"Bienvenue, vous êtes maintenant connecté.\",\r\n  },\r\n  \"Are you sure you want to leave the game?\": {\r\n    en: \"Are you sure you want to leave the game?\",\r\n    tr: \"Oyundan ayrılmak istediğinden emin misin?\",\r\n    de: \"Bist du sicher, dass du das Spiel verlassen willst?\",\r\n    fr: \"Voulez-vous vraiment quitter le jeu?\",\r\n  },\r\n  \"SkrablBot has exchanged his tiles.\": {\r\n    en: \"SkrablBot has exchanged his tiles.\",\r\n    tr: \"SkrablBot harf taşlarını değiştirdi.\",\r\n    de: \"SkrablBot hat seine Buchstabensteine ausgetauscht\",\r\n    fr: \"SkrablBot a échangé ses tuiles.\",\r\n  },\r\n  \"SkrablBot has decided to pass.\": {\r\n    en: \"SkrablBot has decided to pass.\",\r\n    tr: \"SkrablBot pas geçmeye karar verdi.\",\r\n    de: \"SkrablBot hat beschlossen zu bestehen.\",\r\n    fr: \"SkrablBot a décidé de passer.\",\r\n  },\r\n  \"This will be the sixth consecutive pass, and will end the game!  Are you sure you want to pass?\": {\r\n    en:\r\n      \"This will be the sixth consecutive pass, and will end the game!  Are you sure you want to pass?\",\r\n    tr:\r\n      \"Bu art arda altıncı pas olacak ve oyunu bitirecek! Pas geçmek istediğinden emin misin?\",\r\n    de:\r\n      \"Dies ist der sechste Durchgang in Folge und beendet das Spiel! Bist du sicher, dass du bestehen willst?\",\r\n    fr:\r\n      \"Ce sera la sixième passe consécutive et mettra fin au jeu! Êtes-vous sûr de vouloir réussir?\",\r\n  },\r\n  \"Are you sure you want to pass?\": {\r\n    en: \"Are you sure you want to pass?\",\r\n    tr: \"Pas geçmek istediğinden emin misin?\",\r\n    de: \"Bist du sicher, dass du bestehen willst?\",\r\n    fr: \"Etes-vous sûr que vous voulez passer?\",\r\n  },\r\n  \"Are you sure you want to resign?\": {\r\n    en: \"Are you sure you want to resign?\",\r\n    tr: \"Teslim olmak istediğinden emin misin?\",\r\n    de: \"Bist du sicher, dass du aufgeben willst?\",\r\n    fr: \"Êtes-vous sûr de vouloir abandonner?\",\r\n  },\r\n  \"The following word was not found in the dictionary:\": {\r\n    en: \"The following word was not found in the dictionary:\",\r\n    tr: \"Bu kelime sözlükte bulunamadı:\",\r\n    de: \"Das folgende Wort wurde im Wörterbuch nicht gefunden:\",\r\n    fr: \"Le mot suivant n'a pas été trouvé dans le dictionnaire:\",\r\n  },\r\n  \"The first word on the board must use the centre square.\": {\r\n    en: \"The first word on the board must use the centre square.\",\r\n    tr: \"Tahtadaki ilk kelime orta kareyi kullanmalıdır.\",\r\n    de: \"Das erste Wort auf der Tafel muss das mittlere Quadrat verwenden.\",\r\n    fr: \"Le premier mot du tableau doit utiliser le carré central.\",\r\n  },\r\n  \"The move is not valid.\": {\r\n    en: \"The move is not valid.\",\r\n    tr: \"Hamle geçerli değil.\",\r\n    de: \"Der Umzug ist ungültig.\",\r\n    fr: \"Le mouvement n'est pas valide.\",\r\n  },\r\n  \"wins by default!\": {\r\n    en: \"wins by default!\",\r\n    tr: \"hükmen kazandı.\",\r\n    de: \"gewinnt standardmäßig!\",\r\n    fr: \"gagne par défaut!\",\r\n  },\r\n  \"ran out of time!\": {\r\n    en: \"ran out of time!\",\r\n    tr: \"zamanını kaybetti!\",\r\n    de: \"lief die Zeit davon!\",\r\n    fr: \"manqua de temps!\",\r\n  },\r\n  \"wins!\": {\r\n    en: \"wins!\",\r\n    tr: \"kazandı!\",\r\n    de: \"gewinnt!\",\r\n    fr: \"gagne!\",\r\n  },\r\n  \"It's a draw!\": {\r\n    en: \"It's a draw!\",\r\n    tr: \"Bu bir beraberlik!\",\r\n    de: \"Es ist eine Zeichnung!\",\r\n    fr: \"C'est un tirage au sort!\",\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport \"../styles/GameOverModal.css\";\r\nimport { Fade, Bounce } from \"react-awesome-reveal\";\r\nimport { notifications } from \"../assets/notifications\";\r\n\r\nconst GameOverModal = ({\r\n  scores,\r\n  highestScoringWord,\r\n  returnToHomeScreen,\r\n  currentPlayer,\r\n  user,\r\n  invitedPlayer,\r\n  gameMode,\r\n  outcome,\r\n  endedBy,\r\n  lang,\r\n}) => {\r\n  let playerText;\r\n  if (lang === \"en\") {\r\n    playerText = \"Player\";\r\n  } else if (lang === \"tr\") {\r\n    playerText = \"Oyuncu\";\r\n  } else if (lang === \"fr\") {\r\n    playerText = \"joueur\";\r\n  } else if (lang === \"de\") {\r\n    playerText = \"Spieler\";\r\n  }\r\n  let result = \"\";\r\n  const opponentName = gameMode === \"Online\" ? invitedPlayer.name : \"SkrablBot\";\r\n  const playerName = gameMode === \"Online\" ? user.name : playerText;\r\n  const hsw = highestScoringWord.word.toUpperCase();\r\n\r\n  if (currentPlayer == 0) {\r\n    var playerScore = scores[0];\r\n    var opponentScore = scores[1];\r\n  } else {\r\n    var playerScore = scores[1];\r\n    var opponentScore = scores[0];\r\n  }\r\n\r\n  if (outcome === \"TimeOut\") {\r\n    if (endedBy === currentPlayer) {\r\n      playerScore -= 50;\r\n    } else opponentScore -= 50;\r\n  }\r\n\r\n  switch (true) {\r\n    case outcome === \"Resign\":\r\n      result =\r\n        endedBy === currentPlayer\r\n          ? `${opponentName} ${notifications[\"wins by default!\"][lang]}`\r\n          : `${playerName} ${notifications[\"wins by default!\"][lang]}`;\r\n      break;\r\n\r\n    case outcome === \"TimeOut\":\r\n      result =\r\n        endedBy === currentPlayer\r\n          ? `${playerName} ${notifications[\"ran out of time!\"][lang]}`\r\n          : `${opponentName} ${notifications[\"ran out of time!\"][lang]}`;\r\n      break;\r\n\r\n    case playerScore > opponentScore:\r\n      result = `${playerName} ${notifications[\"wins!\"][lang]}`;\r\n      break;\r\n\r\n    case playerScore < opponentScore:\r\n      result = `${opponentName} ${notifications[\"wins!\"][lang]}`;\r\n      break;\r\n\r\n    default:\r\n      result = notifications[\"It's a draw!\"][lang];\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Fade className=\"gameOverModal__wrapper\">\r\n      <Bounce cascade damping={0.5} className=\"gameOverModal__content\">\r\n        <h2>{result}</h2>\r\n        <p>{outcome === \"TimeOut\" && \"(-50pts)\"}</p>\r\n        <h3>\r\n          {lang === \"en\" && \"Scores\"}\r\n          {lang === \"tr\" && \"Skorlar\"}\r\n          {lang === \"fr\" && \"Scores\"}\r\n          {lang === \"de\" && \"Punktestand\"}\r\n        </h3>\r\n        <p>\r\n          {playerName}: &nbsp;&nbsp;{playerScore}pts\r\n        </p>\r\n        <p>\r\n          {opponentName}: &nbsp;&nbsp;{opponentScore}pts\r\n        </p>\r\n        <div\r\n          className={`gameOverModal__hsw ${\r\n            hsw === \"\" ? \"gameOverModal__hsw--hidden\" : \"\"\r\n          }`}\r\n        >\r\n          <h4>\r\n            {lang === \"en\" && \"Highest scoring word\"}\r\n            {lang === \"tr\" && \"En yüksek puan alan kelime\"}\r\n            {lang === \"fr\" && \"Mot ayant obtenu le meilleur score\"}\r\n            {lang === \"de\" && \"Wort mit der höchsten Punktzahl\"}\r\n          </h4>\r\n          <p>\r\n            '{hsw}': &nbsp;&nbsp; {highestScoringWord.points}{\" \"}\r\n            {lang === \"en\" && \"points\"}\r\n            {lang === \"tr\" && \"puan\"}\r\n            {lang === \"fr\" && \"points\"}\r\n            {lang === \"de\" && \"Punkte\"}{\" \"}\r\n          </p>\r\n          <p>{`(${\r\n            highestScoringWord.player === 0 ? playerName : opponentName\r\n          })`}</p>\r\n        </div>\r\n        <button onClick={returnToHomeScreen}>OK</button>\r\n      </Bounce>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default GameOverModal;\r\n","import React from \"react\";\r\nimport \"../styles/ChatModal.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst ChatModal = ({\r\n  closeModal,\r\n  currentPlayer,\r\n  chatThread,\r\n  handleSendMessage,\r\n  lang,\r\n}) => {\r\n  return (\r\n    <Fade triggerOnce className=\"chatModal__wrapper\">\r\n      <Chat\r\n        mode={\"modal\"}\r\n        currentPlayer={currentPlayer}\r\n        chatThread={chatThread}\r\n        handleSendMessage={handleSendMessage}\r\n      />\r\n      <button className=\"button__cancel\" onClick={closeModal}>\r\n        {lang === \"en\" && \"Close\"}\r\n        {lang === \"tr\" && \"Kapat\"}\r\n        {lang === \"fr\" && \"Ferme \"}\r\n        {lang === \"de\" && \"schließen\"}\r\n      </button>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default ChatModal;\r\n","export const squaresAreOccupied = (indices, boardState) => {\r\n  for (const index of indices) {\r\n    const isOccupied = boardState.filter(\r\n      (square) => square.tile && square.index === index\r\n    )[0];\r\n    if (!isOccupied) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n","export const findWordsOnBoard = (boardState, placedTiles) => {\r\n  let wordStart = \"\",\r\n    newWord = false,\r\n    words = [],\r\n    letters = [],\r\n    dirs = [\"across\", \"down\"],\r\n    squares = [];\r\n  const checkSquare = (dir, x, y) => {\r\n    let [row, col] = dir === \"across\" ? [x, y] : [y, x];\r\n    var currentSquare = boardState[col + row * 15];\r\n    const addWord = () => {\r\n      words.push({\r\n        word: letters.join(\"\"),\r\n        start: wordStart,\r\n        dir: dir,\r\n        newWord: newWord,\r\n        squares,\r\n      });\r\n      // console.log('findWords:');\r\n      // console.log(words);\r\n      newWord = false;\r\n    };\r\n    if (!currentSquare.tile) {\r\n      if (wordStart !== \"\" && letters.length > 1) {\r\n        addWord();\r\n      }\r\n      wordStart = \"\";\r\n      letters = [];\r\n      newWord = false;\r\n      squares = [];\r\n    } else {\r\n      letters.push(currentSquare.tile.letter);\r\n      squares.push(currentSquare);\r\n      if (\r\n        placedTiles.filter((item) => item.id === currentSquare.tile.id).length >\r\n        0\r\n      ) {\r\n        newWord = true;\r\n      }\r\n      if (\r\n        (dir == \"across\" && wordStart !== \"\" && col === 14) ||\r\n        (dir == \"down\" && wordStart !== \"\" && row === 14)\r\n      ) {\r\n        addWord();\r\n        wordStart = \"\";\r\n        letters = [];\r\n        newWord = false;\r\n        squares = [];\r\n      } else {\r\n        if (dir == \"across\" && wordStart == \"\" && col !== 14) {\r\n          wordStart = `${row}-${col}`;\r\n        }\r\n        if (dir == \"down\" && wordStart == \"\" && row !== 14) {\r\n          wordStart = `${row}-${col}`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  dirs.forEach((dir) => {\r\n    for (var x = 0; x < 15; x++) {\r\n      for (var y = 0; y < 15; y++) {\r\n        checkSquare(dir, x, y);\r\n      }\r\n    }\r\n  });\r\n  return words;\r\n};\r\n","export const getTurnPoints = (newWords, placedTiles, turn) => {\r\n  let newPoints = 0;\r\n  let turnHighScore = { word: \"\", points: 0 };\r\n  newWords.forEach((wordObj) => {\r\n    let wordMultipliers = [];\r\n    let wordPoints = wordObj.squares.reduce((total, square) => {\r\n      const isNewTile =\r\n        placedTiles.filter((tile) => tile.id === square.tile.id).length > 0;\r\n      if (isNewTile) {\r\n        wordMultipliers.push(square.wordMultiplier);\r\n        return total + square.tile.points * square.letterMultiplier;\r\n      } else {\r\n        return total + square.tile.points;\r\n      }\r\n    }, 0);\r\n    if (wordMultipliers.length) {\r\n      wordMultipliers.forEach((wordMultiplier) => {\r\n        wordPoints = wordPoints * wordMultiplier;\r\n      });\r\n    }\r\n    if (wordPoints > turnHighScore.points) {\r\n      turnHighScore = { word: wordObj.word, points: wordPoints, player: turn };\r\n    }\r\n    newPoints += wordPoints;\r\n  });\r\n  if (placedTiles.length === 7) {\r\n    newPoints += 50;\r\n  }\r\n  return [newPoints, turnHighScore];\r\n};\r\n","export const bonusSquareIndices = {\r\n  doubleLetter: [\r\n    3,\r\n    11,\r\n    36,\r\n    38,\r\n    45,\r\n    52,\r\n    59,\r\n    92,\r\n    96,\r\n    98,\r\n    102,\r\n    108,\r\n    116,\r\n    122,\r\n    126,\r\n    128,\r\n    132,\r\n    165,\r\n    172,\r\n    179,\r\n    186,\r\n    188,\r\n    213,\r\n    221,\r\n  ],\r\n  doubleWord: [\r\n    16,\r\n    28,\r\n    32,\r\n    42,\r\n    48,\r\n    56,\r\n    64,\r\n    70,\r\n    112,\r\n    154,\r\n    160,\r\n    168,\r\n    176,\r\n    182,\r\n    192,\r\n    196,\r\n    208,\r\n  ],\r\n  tripleLetter: [20, 24, 76, 80, 84, 88, 136, 140, 144, 148, 200, 204, 210],\r\n  tripleWord: [0, 7, 14, 105, 119, 210, 217, 224]\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Board from \"../components/Board\";\r\nimport TileRack from \"./TileRack\";\r\nimport StatusBar from \"./StatusBar\";\r\nimport Chat from \"./Chat\";\r\nimport GameButtons from \"./GameButtons\";\r\nimport ExchangeTilesButtons from \"./ExchangeTilesButtons\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport GameOverModal from \"./GameOverModal\";\r\nimport ChatModal from \"./ChatModal\";\r\nimport { generateBoardSquares } from \"../utils/generateBoardSquares\";\r\nimport { shuffle } from \"../utils/shuffle\";\r\nimport { moveIsValid } from \"../utils/moveIsValid\";\r\nimport { squaresAreOccupied } from \"../utils/squaresAreOccupied\";\r\nimport { findWordsOnBoard } from \"../utils/findWordsOnBoard\";\r\nimport { getTurnPoints } from \"../utils/getTurnPoints\";\r\nimport { handleBlankTiles } from \"../utils/handleBlankTiles\";\r\nimport { bonusSquareIndices } from \"../assets/bonusSquareIndices\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { useBeforeunload } from \"react-beforeunload\";\r\nimport axios from \"axios\";\r\nimport shuffleSound from \"../assets/shuffle.wav\";\r\nimport placeTileSound from \"../assets/placeTile.wav\";\r\nimport removeTileSound from \"../assets/removeTile.wav\";\r\nimport correctSound from \"../assets/correct.wav\";\r\nimport invalidSound from \"../assets/invalid.wav\";\r\nimport { notifications } from \"../assets/notifications\";\r\nimport \"../styles/GameScreen.css\";\r\n\r\nconst GameScreen = ({\r\n  user,\r\n  invitedPlayer,\r\n  setNotification,\r\n  setCurrentComponent,\r\n  currentPlayer,\r\n  gameData,\r\n  socket,\r\n  gameMode,\r\n  handleClickChat,\r\n  viewChat,\r\n  handleNewChatMsg,\r\n  resetChatMsg,\r\n  lang,\r\n  setGameMode,\r\n  level,\r\n}) => {\r\n  const [selectedTile, setSelectedTile] = useState(null);\r\n  const [selectedSquareIndex, setSelectedSquareIndex] = useState(null);\r\n  const [playerRackTiles, setPlayerRackTiles] = useState([]);\r\n  const [placedTiles, setPlacedTiles] = useState([]);\r\n  const [gameIsOver, setGameIsOver] = useState(false);\r\n  const [confirmMessage, setConfirmMessage] = useState(null);\r\n  const [boardState, setBoardState] = useState([]);\r\n  const [timeLeftPlayer, setTimeLeftPlayer] = useState(20);\r\n  const [timeLeftOpponent, setTimeLeftOpponent] = useState(20);\r\n  const [scores, setScores] = useState({ 0: 0, 1: 0 });\r\n  const [wordsOnBoard, setWordsOnBoard] = useState(null);\r\n  const [highestScoringWord, setHighestScoringWord] = useState({\r\n    word: \"\",\r\n    points: 0,\r\n    player: null,\r\n  });\r\n  const [turn, setTurn] = useState(null);\r\n  const [outcome, setOutcome] = useState(null);\r\n  const [tilesToExchange, setTilesToExchange] = useState([]);\r\n  const [boardIsDisabled, setBoardIsDisabled] = useState(false);\r\n  const [consecutivePasses, setConsecutivePasses] = useState(0);\r\n  const [computerConsecutivePasses, setComputerConsecutivePasses] = useState(0);\r\n  const [pouch, setPouch] = useState([]);\r\n  const [computerRackTiles, setComputerRackTiles] = useState([]);\r\n  const fillPouch = async () => {\r\n    const res = await axios.post(\"http://localhost:4001/getPouch\", {\r\n      lang,\r\n    });\r\n    setPouch(res.data);\r\n  };\r\n  const moment = require(\"moment\");\r\n  let now = moment();\r\n  const [newMessage, setNewMessage] = useState();\r\n  const [chatThread, setChatThread] = useState([\r\n    {\r\n      playerFromBackend: 0,\r\n      playerName: \"SkrablBot\",\r\n      msg: notifications[\"Welcome, you are now connected.\"][lang],\r\n      date: now.format(\"h:mm:ss a\"),\r\n    },\r\n  ]);\r\n  const [turnWords, setTurnWords] = useState([]);\r\n  const [timeWarning, setTimeWarning] = useState(false);\r\n  const [endedBy, setEndedBy] = useState(0);\r\n  const [blankTileLetter, setBlankTileLetter]= useState(\"\")\r\n\r\n  useBeforeunload(\r\n    () => notifications[\"Are you sure you want to leave the game?\"][lang]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (gameMode === \"Online\") {\r\n      socket.on(\"receiveMsg\", (data) => {\r\n        setNewMessage(data);\r\n        handleNewChatMsg();\r\n      });\r\n      socket.on(\"chatError\", (data) => console.log(data));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (newMessage) {\r\n      setChatThread([...chatThread, newMessage]);\r\n      setNewMessage(null);\r\n    }\r\n  }, [newMessage]);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const token = localStorage.getItem(\"token\");\r\n    const newMessage = e.target.message.value;\r\n    socket.emit(\"sendMsg\", {\r\n      token,\r\n      gameId: gameData.gameId,\r\n      currentPlayer,\r\n      newMessage,\r\n    });\r\n    e.target.reset();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (turn !== null) {\r\n      getTiles();\r\n    }\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    //fill racks at start of game (after pouch is ready)\r\n    if (gameMode === \"Computer\") {\r\n      if (\r\n        pouch.length &&\r\n        !playerRackTiles.length &&\r\n        !computerRackTiles.length\r\n      ) {\r\n        const pouchCopy = [...pouch];\r\n        const newTilesHuman = pouchCopy.slice(0, 7);\r\n        const newTilesComputer = pouchCopy.slice(7, 14);\r\n        pouchCopy.splice(0, 14);\r\n        setPouch([...pouchCopy]);\r\n        setPlayerRackTiles([...newTilesHuman]);\r\n        setComputerRackTiles([...newTilesComputer]);\r\n      }\r\n    }\r\n  }, [pouch]);\r\n\r\n  useEffect(() => {\r\n    //get tiles after user confirms tile exchange\r\n    if (!boardIsDisabled && tilesToExchange.length > 0) {\r\n      getTiles();\r\n    }\r\n  }, [boardIsDisabled]);\r\n\r\n  const computerMove = () => {\r\n    axios\r\n      .post(\"http://localhost:4001/computerMove/\", {\r\n        rackTiles: computerRackTiles,\r\n        boardState,\r\n        computerConsecutivePasses,\r\n        lang,\r\n        level,\r\n      })\r\n      .then((res) => {\r\n        setTimeout(() => {\r\n          if (res.data.exchange && pouch.length > 0) {\r\n            setComputerConsecutivePasses(0);\r\n            setNotification(\"SkrablBot has exchanged his tiles.\");\r\n            const computerRackTilesCopy = [...computerRackTiles];\r\n            setPouch([...pouch, ...computerRackTilesCopy]);\r\n            setComputerRackTiles([]);\r\n            //computer rack tiles might not be updated by the time getTiles is called\r\n            nextPlayer(0, scores, highestScoringWord);\r\n          } else if (res.data.pass || (res.data.exchange && !pouch.length)) {\r\n            setComputerConsecutivePasses(computerConsecutivePasses + 1);\r\n            setNotification(\"SkrablBot has decided to pass.\");\r\n            nextPlayer(1, scores, highestScoringWord);\r\n          } else {\r\n            setComputerConsecutivePasses(0);\r\n            const newWords = findWordsOnBoard(\r\n              res.data.newBoardState,\r\n              res.data.tilesUsed\r\n            ).filter((word) => word.newWord === true);\r\n            const [turnPoints, turnHighScore] = getTurnPoints(\r\n              newWords,\r\n              res.data.tilesUsed,\r\n              turn\r\n            );\r\n            if (turnHighScore.points > highestScoringWord.points) {\r\n              setHighestScoringWord(turnHighScore);\r\n            }\r\n            const playerPreviousPoints = scores[turn];\r\n            const updatedScores = {\r\n              ...scores,\r\n              [turn]: playerPreviousPoints + turnPoints,\r\n            };\r\n            setBoardState(res.data.newBoardState);\r\n            setComputerRackTiles(res.data.newRackTiles);\r\n            setScores(updatedScores);\r\n            nextPlayer(consecutivePasses * -1, updatedScores, highestScoringWord);\r\n          }\r\n        }, (Math.floor((Math.random() * 6000) + 3000)))\r\n      });\r\n  };\r\n\r\n  //EFFECTS\r\n\r\n  useEffect(() => {\r\n    //get board and set inital state\r\n    if (gameMode === \"Online\") {\r\n      setGameIsOver(gameData.gameState.isOver);\r\n      setPlayerRackTiles(\r\n        currentPlayer === 0\r\n          ? gameData.gameState.player1Tiles\r\n          : gameData.gameState.player2Tiles\r\n      );\r\n      setBoardState(gameData.gameState.boardState);\r\n      setTimeLeftPlayer(\r\n        currentPlayer === 0\r\n          ? gameData.gameState.player1TimeLeft\r\n          : gameData.gameState.player2TimeLeft\r\n      );\r\n      setTimeLeftOpponent(\r\n        currentPlayer === 1\r\n          ? gameData.gameState.player1TimeLeft\r\n          : gameData.gameState.player2TimeLeft\r\n      );\r\n      setScores(gameData.gameState.scores);\r\n      setTurn(gameData.gameState.turn);\r\n      setConsecutivePasses(gameData.gameState.consecutivePasses);\r\n      setPouch(gameData.gameState.pouch);\r\n      setHighestScoringWord({ word: \"\", points: 0, player: null });\r\n      setOutcome(null);\r\n    }\r\n    if (gameMode === \"Computer\") {\r\n      fillPouch();\r\n      setTurn(0);\r\n    }\r\n    getBoard();\r\n  }, [gameMode]);\r\n\r\n  useEffect(() => {\r\n    placeTile();\r\n  }, [selectedSquareIndex]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      consecutivePasses > 5 ||\r\n      (consecutivePasses > 1 && pouch.length === 0)\r\n    ) {\r\n      // game ends if players pass six turns in a row, or pass twice when there are no tiles left in pouch\r\n      // end game\r\n      gameOver();\r\n    }\r\n  }, [consecutivePasses]);\r\n\r\n  useEffect(() => {\r\n    //called here to make sure pouch and player rack have finished updating first\r\n    if (gameMode === \"Computer\" && turn === 1) {\r\n      computerMove();\r\n    }\r\n  }, [playerRackTiles]);\r\n\r\n  useEffect(() => {\r\n    //if human passes or exchanges tiles, the above useEffect won't work so just call computerMove when turn changes\r\n    if (gameMode === \"Computer\" && turn === 1 && playerRackTiles.length === 7) {\r\n      computerMove();\r\n    }\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    if (selectedTile) {\r\n      const tile = selectedTile;\r\n      tile.letter = blankTileLetter\r\n      tile.wasBlank = true\r\n    setSelectedTile(tile)\r\n    placeTile2();\r\n    }\r\n  }, [blankTileLetter])\r\n\r\n  useEffect(() => {\r\n    if (gameMode === \"Online\") {\r\n      socket.on(\"sendingTiles\", (data) => {\r\n        setPlayerRackTiles([...playerRackTiles, ...data]);\r\n        //here currentRackTiles are always 7\r\n      });\r\n\r\n      socket.on(\"gameEnd\", (data) => {\r\n        //redirect to players screen or show who won\r\n        console.log(data.gameEndedBy); // player 0 or player 1\r\n        console.log(data.game.gameState.outcome); //the outcome\r\n        setOutcome(data.game.gameState.outcome);\r\n        setEndedBy(data.gameEndedBy);\r\n        exitGame();\r\n      });\r\n\r\n      socket.on(\"gameUpdated\", (data) => {\r\n        setGameIsOver(data.gameState.isOver);\r\n        setBoardState(data.gameState.boardState);\r\n        setTimeLeftPlayer(\r\n          currentPlayer === 0\r\n            ? gameData.gameState.player1TimeLeft\r\n            : gameData.gameState.player2TimeLeft\r\n        );\r\n        setTimeLeftOpponent(\r\n          currentPlayer === 1\r\n            ? gameData.gameState.player1TimeLeft\r\n            : gameData.gameState.player2TimeLeft\r\n        );\r\n        setScores(data.gameState.scores);\r\n        setTurn(data.gameState.turn);\r\n        setConsecutivePasses(data.gameState.consecutivePasses);\r\n        setHighestScoringWord(data.gameState.highestScoringWord);\r\n        setOutcome(data.gameState.outcome);\r\n      });\r\n    }\r\n  }, [playerRackTiles]);\r\n\r\n  const getBoard = () => {\r\n    const squares = generateBoardSquares(bonusSquareIndices);\r\n    setBoardState([...squares]);\r\n  };\r\n\r\n  const getTiles = () => {\r\n    if (gameMode === \"Online\" && turn !== currentPlayer) {\r\n      const numTilesNeeded = 7 - playerRackTiles.length;\r\n      if (numTilesNeeded <= 0) {\r\n        return;\r\n      }\r\n      socket.emit(\"requestTiles\", {\r\n        gameId: gameData.gameId,\r\n        numTilesNeeded: numTilesNeeded,\r\n        player: currentPlayer,\r\n      });\r\n    }\r\n    if (gameMode === \"Computer\") {\r\n      let rackToUpdate;\r\n      if (turn === 1) {\r\n        rackToUpdate = playerRackTiles;\r\n      } else {\r\n        rackToUpdate = computerRackTiles;\r\n      }\r\n      const numTilesNeeded = 7 - rackToUpdate.length;\r\n      if (!numTilesNeeded) {\r\n        return;\r\n      }\r\n      const pouchCopy = [...pouch];\r\n      pouchCopy.splice(0, numTilesNeeded);\r\n      const newTiles = pouch.slice(0, numTilesNeeded);\r\n      setPouch([...pouchCopy]);\r\n      if (rackToUpdate === computerRackTiles) {\r\n        setComputerRackTiles([...computerRackTiles, ...newTiles]);\r\n      } else {\r\n        setPlayerRackTiles([...playerRackTiles, ...newTiles]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextPlayer = (\r\n    x = 0,\r\n    newScores = { 0: 0, 0: 0 },\r\n    highestScoringWord = highestScoringWord\r\n  ) => {\r\n    if (gameMode === \"Online\") {\r\n      socket.emit(\"updateGameState\", {\r\n        gameId: gameData.gameId,\r\n        boardState: boardState,\r\n        playerRackTiles: playerRackTiles,\r\n        player: currentPlayer,\r\n        scores: newScores,\r\n        consecutivePasses: consecutivePasses + x,\r\n        returnedTiles: tilesToExchange,\r\n        currentPlayerTimeLeft: timeLeftPlayer,\r\n        opponentTimeLeft: timeLeftOpponent,\r\n        highestScoringWord: highestScoringWord,\r\n      });\r\n    }\r\n    if (gameMode === \"Computer\") {\r\n      if (!pouch.length && consecutivePasses > 1) {\r\n        return;\r\n      } else {\r\n        setTurn(turn === 0 ? 1 : 0);\r\n        setConsecutivePasses(consecutivePasses + x);\r\n      }\r\n    }\r\n  };\r\n\r\n  const placeTile = () => {\r\n    if (selectedSquareIndex !== null) {\r\n      const squareIsOccupied = squaresAreOccupied(\r\n        [selectedSquareIndex],\r\n        boardState\r\n      );\r\n      if (squareIsOccupied) {\r\n        return;\r\n      }\r\n      playSound(placeTileSound);\r\n\r\n      if (selectedTile.letter === \"\") {\r\n      \r\n        setConfirmMessage({\r\n          type: \"blankTile\",\r\n          message: \"What letter would you like to assign to the blank tile?\"\r\n        })\r\n        return;\r\n      }\r\n      else {\r\n        const tile = selectedTile;\r\n        tile.wasBlank = false\r\n        setSelectedTile(tile)\r\n        placeTile2()\r\n      }\r\n    };\r\n  }\r\n    \r\n    const placeTile2 = () => {\r\n              const tileToAdd = {\r\n        ...selectedTile,\r\n        square: selectedSquareIndex,\r\n        player: 0,\r\n      };\r\n      const updatedBoardState = boardState.map((square) => {\r\n        if (square.index === selectedSquareIndex) {\r\n          return { ...square, tile: tileToAdd };\r\n        } else {\r\n          return square;\r\n        }\r\n      });\r\n\r\n      setBoardState(updatedBoardState);\r\n      setPlacedTiles([\r\n        ...placedTiles,\r\n        { ...selectedTile, square: selectedSquareIndex },\r\n      ]);\r\n      setPlayerRackTiles([\r\n        ...playerRackTiles.filter((tile) => tile.id !== selectedTile.id),\r\n      ]);\r\n      setSelectedTile(null);\r\n      setSelectedSquareIndex(null);\r\n    }\r\n    \r\n\r\n  //EVENT HANDLERS\r\n\r\n  const handleClickSquare = (square) => {\r\n    if (currentPlayer !== turn) {\r\n      return;\r\n    }\r\n    if (selectedTile) {\r\n      setSelectedSquareIndex(square.index);\r\n    }\r\n  };\r\n\r\n  const handleClickPlacedTile = (tileToRemove) => {\r\n    if (\r\n      selectedTile === 0 ||\r\n      currentPlayer !== turn ||\r\n      placedTiles.filter((tile) => tile.square == tileToRemove.square)\r\n        .length === 0\r\n    )\r\n      return;\r\n\r\n    if (tileToRemove.player === 0) {\r\n      playSound(removeTileSound);\r\n      const updatedBoardState = boardState.map((square) => {\r\n        if (square.tile && square.tile.square === tileToRemove.square) {\r\n          return { ...square, tile: null };\r\n        } else {\r\n          return square;\r\n        }\r\n      });\r\n      setBoardState(updatedBoardState);\r\n      setPlacedTiles(\r\n        placedTiles.filter((tile) => tile.square !== tileToRemove.square)\r\n      );\r\n      if (tileToRemove.wasBlank) tileToRemove.letter = \"\";\r\n      setPlayerRackTiles([...playerRackTiles, tileToRemove]);\r\n    }\r\n  };\r\n\r\n  const handleClickPass = () => {\r\n    if (currentPlayer !== turn) return;\r\n    if (consecutivePasses === 5) {\r\n      setConfirmMessage({\r\n        type: \"pass\",\r\n        message:\r\n          notifications[\r\n            \"This will be the sixth consecutive pass, and will end the game!  Are you sure you want to pass?\"\r\n          ][lang],\r\n      });\r\n    } else {\r\n      setConfirmMessage({\r\n        type: \"pass\",\r\n        message: notifications[\"Are you sure you want to pass?\"][lang],\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClickResign = () => {\r\n    setConfirmMessage({\r\n      type: \"resign\",\r\n      message: notifications[\"Are you sure you want to resign?\"][lang],\r\n    });\r\n  };\r\n\r\n  const playSound = (audioFile) => {\r\n    const audio = new Audio(audioFile);\r\n    audio.play();\r\n  };\r\n\r\n  const handleClickShuffle = () => {\r\n    playSound(shuffleSound);\r\n    const shuffled = shuffle([...playerRackTiles]);\r\n    setPlayerRackTiles([...shuffled]);\r\n  };\r\n\r\n  const handleClickTile = (tile) => {\r\n    if (currentPlayer !== turn) return;\r\n    if (boardIsDisabled) {\r\n      if (\r\n        [...tilesToExchange].filter((item) => item.id === tile.id).length === 0\r\n      ) {\r\n        setTilesToExchange([...tilesToExchange, tile]);\r\n      } else {\r\n        setTilesToExchange(\r\n          [...tilesToExchange].filter((item) => item.id !== tile.id)\r\n        );\r\n      }\r\n    } else {\r\n      setSelectedTile(tile);\r\n    }\r\n  };\r\n\r\n  const handleResign = () => {\r\n    closeModal();\r\n    setOutcome(\"Resign\");\r\n    gameOver(\"Resign\");\r\n  };\r\n\r\n  const handlePass = () => {\r\n    closeModal();\r\n    nextPlayer(1, scores, highestScoringWord);\r\n    setConsecutivePasses(consecutivePasses + 1);\r\n  };\r\n\r\n  const handleTimeOut = () => {\r\n    setOutcome(\"TimeOut\");\r\n    gameOver(\"TimeOut\");\r\n  };\r\n\r\n  const handleTimeWarning = () => {\r\n    setTimeWarning(true);\r\n  };\r\n\r\n  const handleClickExchangeTiles = () => {\r\n    if (currentPlayer === turn) {\r\n      setBoardIsDisabled(!boardIsDisabled);\r\n    }\r\n  };\r\n\r\n  const handleCancelExchange = () => {\r\n    setTilesToExchange([]);\r\n    setBoardIsDisabled(!boardIsDisabled);\r\n  };\r\n\r\n  const handleConfirmExchange = () => {\r\n    const idsToRemove = tilesToExchange.map((tile) => tile.id);\r\n    const updatedRack = playerRackTiles.filter(\r\n      (tile) => !idsToRemove.includes(tile.id)\r\n    );\r\n    setPlayerRackTiles(updatedRack);\r\n    setBoardIsDisabled(false);\r\n    //in online mode, tiles will be returned at end of turn\r\n    if (gameMode === \"Computer\") {\r\n      setPouch([...pouch, ...tilesToExchange]);\r\n    }\r\n    nextPlayer(consecutivePasses * -1, scores, highestScoringWord);\r\n  };\r\n\r\n  const handleClickClearTiles = () => {\r\n    if (currentPlayer !== turn) return;\r\n    setPlayerRackTiles([...playerRackTiles, ...placedTiles]);\r\n    const placedTilesSquares = placedTiles.map((tile) => tile.square);\r\n    const updatedBoardState = [\r\n      ...boardState.map((square) => {\r\n        if (placedTilesSquares.includes(square.index)) {\r\n          return { ...square, tile: null };\r\n        } else {\r\n          return square;\r\n        }\r\n      }),\r\n    ];\r\n    setBoardState([...updatedBoardState]);\r\n    setPlacedTiles([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (placedTiles.length > 0) {\r\n      getWordsOnBoard();\r\n    }\r\n  }, [placedTiles]);\r\n\r\n  const getWordsOnBoard = () => {\r\n    const words = findWordsOnBoard(boardState, placedTiles);\r\n    setWordsOnBoard(words);\r\n  };\r\n\r\n  const handleClickConfirmMove = () => {\r\n    if (currentPlayer !== turn) return;\r\n    if (moveIsValid(placedTiles, boardState)) {\r\n      var newWords = wordsOnBoard.filter((word) => word.newWord === true);\r\n      setTurnWords(newWords);\r\n      handleBlankTiles(newWords, setConfirmMessage);\r\n      axios\r\n        .post(\"http://localhost:4001/verifyWord\", {\r\n          words: newWords,\r\n          lang,\r\n        })\r\n        .then((res) => {\r\n          const results = res.data;\r\n          if (Object.values(results).every((val) => val === \"true\")) {\r\n            const [turnPoints, turnHighScore] = getTurnPoints(\r\n              newWords,\r\n              placedTiles,\r\n              turn\r\n            );\r\n            const playerPreviousPoints = scores[turn];\r\n            const updatedScores = {\r\n              ...scores,\r\n              [turn]: playerPreviousPoints + turnPoints,\r\n            };\r\n            playSound(correctSound);\r\n            setScores(updatedScores);\r\n            if (turnHighScore.points > highestScoringWord.points) {\r\n              setHighestScoringWord(turnHighScore);\r\n              nextPlayer(consecutivePasses * -1, updatedScores, turnHighScore);\r\n            } else\r\n              nextPlayer(\r\n                consecutivePasses * -1,\r\n                updatedScores,\r\n                highestScoringWord\r\n              );\r\n            setPlacedTiles([]);\r\n            return;\r\n          } else {\r\n            const checkedWords = Object.keys(results);\r\n            const invalidWords = [];\r\n            checkedWords.forEach((word) => {\r\n              if (results[word] === \"false\") {\r\n                invalidWords.push(word);\r\n              } else {\r\n                return;\r\n              }\r\n            });\r\n            //just showing first for simplicity\r\n            playSound(invalidSound);\r\n            setNotification(\r\n              `${notifications[\"The following word was not found in the dictionary:\"][lang]} ${invalidWords[0]}`\r\n            );\r\n          }\r\n        });\r\n      return;\r\n    } else {\r\n      playSound(invalidSound);\r\n      const placedTilesIndices = placedTiles.map((tile) => tile.square);\r\n      if (\r\n        scores[0] === 0 &&\r\n        scores[1] === 0 &&\r\n        placedTilesIndices.indexOf(112) === -1\r\n      ) {\r\n        setNotification(\r\n          notifications[\r\n            \"The first word on the board must use the centre square.\"\r\n          ][lang]\r\n        );\r\n        return;\r\n      } else {\r\n        setNotification(notifications[\"The move is not valid.\"][lang]);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  //OTHER\r\n\r\n  const gameOver = (outcome) => {\r\n    if (gameMode === \"Online\") {\r\n      socket.emit(\"gameOver\", gameData.gameId, outcome, currentPlayer);\r\n    }\r\n    if (gameMode === \"Computer\") {\r\n      setGameIsOver(true);\r\n      exitGame();\r\n    }\r\n  };\r\n\r\n  const exitGame = () => {\r\n    setGameIsOver(true);\r\n  };\r\n\r\n  const returnToHomeScreen = () => {\r\n    if (gameMode === \"Online\") {\r\n      resetChatMsg();\r\n      setCurrentComponent(\"Login\");\r\n    } else {\r\n      setCurrentComponent(\"WelcomeScreen\");\r\n      setGameMode(null);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setConfirmMessage(null);\r\n  };\r\n\r\n  return (\r\n    <Fade className=\"container__full-height\" triggerOnce>\r\n      <div className=\"gameScreen__wrapper\">\r\n        {viewChat && (\r\n          <ChatModal\r\n            currentPlayer={currentPlayer}\r\n            closeModal={handleClickChat}\r\n            chatThread={chatThread}\r\n            handleSendMessage={handleSendMessage}\r\n            lang={lang}\r\n          />\r\n        )}\r\n        <div className=\"gameScreen__main\">\r\n          <div className=\"gameScreen__board\">\r\n            <Board\r\n              handleClickSquare={handleClickSquare}\r\n              handleClickPlacedTile={handleClickPlacedTile}\r\n              boardState={boardState}\r\n              isDisabled={boardIsDisabled}\r\n              lang={lang}\r\n            />\r\n            <TileRack\r\n              selectedTile={selectedTile}\r\n              tilesToExchange={tilesToExchange}\r\n              playerRackTiles={playerRackTiles}\r\n              handleClickTile={handleClickTile}\r\n              lang={lang}\r\n              turn={turn}\r\n              boardIsDisabled={boardIsDisabled}\r\n            />\r\n          </div>\r\n          <StatusBar\r\n            highestScoringWord={highestScoringWord}\r\n            computerRackTiles={computerRackTiles}\r\n            pouch={pouch}\r\n            scores={scores}\r\n            user={user}\r\n            invitedPlayer={invitedPlayer}\r\n            setNotification={setNotification}\r\n            timeLeftPlayer={timeLeftPlayer}\r\n            timeLeftOpponent={timeLeftOpponent}\r\n            setTimeLeftPlayer={setTimeLeftPlayer}\r\n            setTimeLeftOpponent={setTimeLeftOpponent}\r\n            currentPlayer={currentPlayer}\r\n            turn={turn}\r\n            gameMode={gameMode}\r\n            handleTimeOut={handleTimeOut}\r\n            timeWarning={timeWarning}\r\n            handleTimeWarning={handleTimeWarning}\r\n            lang={lang}\r\n          />\r\n          {!boardIsDisabled && (\r\n            <GameButtons\r\n              placedTiles={placedTiles}\r\n              handleClickClearTiles={handleClickClearTiles}\r\n              handleClickShuffle={handleClickShuffle}\r\n              handleClickConfirmMove={handleClickConfirmMove}\r\n              handleClickResign={handleClickResign}\r\n              handleClickPass={handleClickPass}\r\n              handleClickExchangeTiles={handleClickExchangeTiles}\r\n              lang={lang}\r\n            />\r\n          )}\r\n          {boardIsDisabled && (\r\n            <ExchangeTilesButtons\r\n              handleCancelExchange={handleCancelExchange}\r\n              handleConfirmExchange={handleConfirmExchange}\r\n              lang={lang}\r\n            />\r\n          )}\r\n          {gameMode === \"Online\" && (\r\n            <Chat\r\n              chatThread={chatThread}\r\n              setChatThread={setChatThread}\r\n              gameId={gameData.gameId}\r\n              currentPlayer={currentPlayer}\r\n              socket={socket}\r\n              handleSendMessage={handleSendMessage}\r\n              lang={lang}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {gameIsOver && (\r\n          <GameOverModal\r\n            user={user}\r\n            invitedPlayer={invitedPlayer}\r\n            currentPlayer={currentPlayer}\r\n            scores={scores}\r\n            outcome={outcome}\r\n            endedBy={endedBy}\r\n            highestScoringWord={highestScoringWord}\r\n            gameMode={gameMode}\r\n            socket={socket}\r\n            returnToHomeScreen={returnToHomeScreen}\r\n            lang={lang}\r\n          />\r\n        )}\r\n        {confirmMessage && (\r\n          <ConfirmModal\r\n            message={confirmMessage}\r\n            handleResign={handleResign}\r\n            handlePass={handlePass}\r\n            closeModal={closeModal}\r\n            turnWords={turnWords}\r\n            setTurnWords={setTurnWords}\r\n            setBlankTileLetter={setBlankTileLetter}\r\n            lang={lang}\r\n          />\r\n        )}\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default GameScreen;","export const generateBoardSquares = (bonusSquareIndices) => {\r\n  let bonusSquares = [];\r\n  Object.keys(bonusSquareIndices).forEach((key) => {\r\n    let letterMultiplier = 1;\r\n    let wordMultiplier = 1;\r\n    if (key === \"doubleLetter\") {\r\n      letterMultiplier = 2;\r\n    } else if (key === \"tripleLetter\") {\r\n      letterMultiplier = 3;\r\n    } else if (key === \"doubleWord\") {\r\n      wordMultiplier = 2;\r\n    } else if (key === \"tripleWord\") {\r\n      wordMultiplier = 3;\r\n    }\r\n    const newArray = bonusSquareIndices[key].map((index) => ({\r\n      index,\r\n      letterMultiplier,\r\n      wordMultiplier,\r\n    }));\r\n    bonusSquares = [...bonusSquares, ...newArray].sort((a, b) =>\r\n      a.index > b.index ? 1 : -1\r\n    );\r\n  });\r\n  const bonusIndices = bonusSquares.map((obj) => obj.index);\r\n  const allSquares = [];\r\n  const totalSquares = 225;\r\n  const squaresPerRow = 15;\r\n  for (let i = 0; i < totalSquares; i++) {\r\n    const row = Math.floor(i / squaresPerRow);\r\n    const col = i % squaresPerRow;\r\n    if (bonusIndices.includes(i)) {\r\n      const bonusSquare = bonusSquares.find((obj) => obj.index === i);\r\n      allSquares.push({ ...bonusSquare, row, col });\r\n    } else {\r\n      allSquares.push({\r\n        index: i,\r\n        letterMultiplier: 1,\r\n        wordMultiplier: 1,\r\n        row,\r\n        col,\r\n      });\r\n    }\r\n  }\r\n  return allSquares;\r\n};\r\n","export const shuffle = (array) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n};\r\n","import { squaresAreOccupied } from \"../utils/squaresAreOccupied\";\r\n\r\nexport const moveIsValid = (placedTiles, boardState) => {\r\n  //must all be in same row or col\r\n  const occupiedIndices = placedTiles.map((tile) => tile.square);\r\n  const occupiedSquares = boardState.filter((square) =>\r\n    occupiedIndices.includes(square.index)\r\n  );\r\n  const rowsAreSame = occupiedSquares.every(\r\n    (square) => square.row === occupiedSquares[0].row\r\n  );\r\n  const colsAreSame = occupiedSquares.every(\r\n    (square) => square.col === occupiedSquares[0].col\r\n  );\r\n  if (!rowsAreSame && !colsAreSame) {\r\n    console.log(\"PLACED TILES\");\r\n    console.log(placedTiles);\r\n    console.log(\"OCCUPIED SQUARES\");\r\n    console.log(occupiedSquares);\r\n    console.log(\"NOT ALL IN SAME LINE!\");\r\n    return false;\r\n  }\r\n  //must be no gap between the first and last placed tiles\r\n  const sortedSquares = occupiedSquares.sort((a, b) => a.index < b.index);\r\n  const firstSquare = sortedSquares[0];\r\n  const lastSquare = sortedSquares[placedTiles.length - 1];\r\n  let alignment;\r\n  let alignmentOpposite;\r\n  if (rowsAreSame) {\r\n    alignment = \"row\";\r\n    alignmentOpposite = \"col\";\r\n  } else {\r\n    alignment = \"col\";\r\n    alignmentOpposite = \"row\";\r\n  }\r\n  const indicesToCheck = boardState\r\n    .filter(\r\n      (square) =>\r\n        square[alignment] === firstSquare[alignment] &&\r\n        square[alignmentOpposite] >= firstSquare[alignmentOpposite] &&\r\n        square[alignmentOpposite] <= lastSquare[alignmentOpposite]\r\n    )\r\n    .map((square) => square.index);\r\n  if (!squaresAreOccupied(indicesToCheck, boardState)) {\r\n    console.log(\"PLACED TILES\");\r\n    console.log(placedTiles);\r\n    console.log(\"OCCUPIED SQUARES\");\r\n    console.log(occupiedSquares);\r\n    console.log(\"SQUARES THAT MUST BE OCCUPIED\");\r\n    console.log(indicesToCheck);\r\n    console.log(\"MUST BE NO GAP!\");\r\n    return false;\r\n  }\r\n  const tilesOnBoard = boardState.filter((square) => square.tile);\r\n  if (tilesOnBoard.length - occupiedSquares.length === 0) {\r\n    //first word on board must have at least two letters and must occupy middle square\r\n    if (placedTiles.length < 2) {\r\n      return false;\r\n    }\r\n    const centerSquareIndex = 112;\r\n    const centerSquare = boardState.filter(\r\n      (square) => square.index === centerSquareIndex\r\n    )[0];\r\n    if (!centerSquare.tile) {\r\n      return false;\r\n    }\r\n  } else {\r\n    //if not first word, it must be connected to at least one other tile on board\r\n    if (tilesOnBoard.length > 0) {\r\n      const aboveAndBelowSquares = boardState.filter(\r\n        (square) =>\r\n          (square[alignment] === firstSquare[alignment] - 1 ||\r\n            square[alignment] === firstSquare[alignment] + 1) &&\r\n          square[alignmentOpposite] >= firstSquare[alignmentOpposite] &&\r\n          square[alignmentOpposite] <= lastSquare[alignmentOpposite]\r\n      );\r\n      const endSquares = boardState.filter(\r\n        (square) =>\r\n          square[alignment] === firstSquare[alignment] &&\r\n          (square[alignmentOpposite] === firstSquare[alignmentOpposite] - 1 ||\r\n            square[alignmentOpposite] === lastSquare[alignmentOpposite] + 1)\r\n      );\r\n      const adjacentSquares = [...aboveAndBelowSquares, ...endSquares];\r\n      const occupiedAdjacentSquares = adjacentSquares.filter(\r\n        (square) => square.tile\r\n      );\r\n      if (occupiedAdjacentSquares.length === 0) {\r\n        console.log(\"PLACED TILES\");\r\n        console.log(placedTiles);\r\n        console.log(\"OCCUPIED SQUARES\");\r\n        console.log(occupiedSquares);\r\n        console.log(\"ALL ADJACENT SQUARES\");\r\n        console.log(adjacentSquares);\r\n        console.log(\"OCCUPIED ADJACENT SQUARES\");\r\n        console.log(occupiedAdjacentSquares);\r\n        console.log(\"MUST BE CONNECTED TO ANOTHER TILE!\");\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n","import React from 'react'\r\n\r\nexport const handleBlankTiles = (newWords, setConfirmMessage) => {\r\n    newWords.map((newWord) => {\r\n        newWord.squares.map(square => {\r\n            if (square.tile.letter === \"\") {\r\n                setConfirmMessage({\r\n                    type: \"blankTile\",\r\n                    message: \"The word you made: \"\r\n                })\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport \"../styles/NotificationModal.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst NotificationModal = ({\r\n  notification,\r\n  handleCloseNotificationModal,\r\n  lang,\r\n}) => {\r\n  return (\r\n    <Fade triggerOnce className=\"notificationModal__wrapper\">\r\n      <div className=\"notificationModal__content\">\r\n        <p>{notification}</p>\r\n        <button onClick={handleCloseNotificationModal}>\r\n          {lang === \"en\" && \"Close\"}\r\n          {lang === \"tr\" && \"Kapat\"}\r\n          {lang === \"fr\" && \"Ferme \"}\r\n          {lang === \"de\" && \"schließen\"}\r\n        </button>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default NotificationModal;\r\n","import React from \"react\";\r\nimport \"../styles/RulesModal.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst RulesModal = ({ closeModal, lang }) => {\r\n  return (\r\n    <Fade triggerOnce className=\"rulesModal__wrapper\" onClick={closeModal}>\r\n      <div className=\"rulesModal__content\">\r\n        <div className=\"rulesModal__text\">\r\n          {lang === \"en\" && (\r\n            <>\r\n              <h1>Skrabl Rules</h1>\r\n              <p>\r\n                When playing Skrabl, anywhere from one to two players will enjoy\r\n                the game. The object when playing is to score more points than\r\n                other players. As words are placed on the game board, points are\r\n                collected and each letter that is used in the game will have a\r\n                different point value. The main strategy is to play words that\r\n                have the highest possible score based on the combination of\r\n                letters.\r\n              </p>\r\n\r\n              <h3>The Skrabl Board</h3>\r\n              <p>\r\n                A Skrabl board will consist of cells that are located in a large\r\n                square grid. The board offers 15 cells high and 15 cells wide.\r\n                The tiles used on the game will fit in each cell on the board.\r\n              </p>\r\n\r\n              <h3>Skrabl Tiles</h3>\r\n              <p>\r\n                There are 100 tiles that are used in the game and 98 of them\r\n                will contain letters and point values. There are 2 blank tiles\r\n                that can be used as wild tiles to take the place of any letter.\r\n                When a blank is played, it will remain in the game as the letter\r\n                it substituted for.\r\n              </p>\r\n\r\n              <p>\r\n                Different letters in the game will have various point values and\r\n                this will depend on how rare the letter is and how difficult it\r\n                may be to lay that letter. Blank tiles will have no point\r\n                values.\r\n              </p>\r\n\r\n              <h3>Tile Values</h3>\r\n              <p>\r\n                Below are the point values for each letter that is used in a\r\n                Skrabl game.\r\n              </p>\r\n\r\n              <p>0 Points - Blank tile.</p>\r\n\r\n              <p>1 Point - A, E, I, L, N, O, R, S, T and U.</p>\r\n\r\n              <p>2 Points - D and G.</p>\r\n\r\n              <p>3 Points - B, C, M and P.</p>\r\n\r\n              <p>4 Points - F, H, V, W and Y.</p>\r\n\r\n              <p>5 Points - K.</p>\r\n\r\n              <p>8 Points - J and X.</p>\r\n\r\n              <p>10 Points - Q and Z.</p>\r\n\r\n              <h3>Extra Point Values</h3>\r\n              <p>\r\n                When looking at the board, players will see that some squares\r\n                offer multipliers. Should a tile be placed on these squares, the\r\n                value of the tile will be multiplied by 2x or 3x. Some squares\r\n                will also multiply the total value of the word and not just the\r\n                single point value of one tile.\r\n              </p>\r\n\r\n              <p>\r\n                Double Letter Scores - The light blue cells in the board are\r\n                isolated and when these are used, they will double the value of\r\n                the tile placed on that square.\r\n              </p>\r\n\r\n              <p>\r\n                Triple Letter Score - The dark blue cell in the board will be\r\n                worth triple the amount, so any tile placed here will earn more\r\n                points.\r\n              </p>\r\n\r\n              <p>\r\n                Double Word Score - When a cell is light red in colour, it is a\r\n                double word cell and these run diagonally on the board, towards\r\n                the four corners. When a word is placed on these squares, the\r\n                entire value of the word will be doubled.\r\n              </p>\r\n\r\n              <p>\r\n                Triple Word Score - The dark red square is where the high points\r\n                can be earned as this will triple the word score. Placing any\r\n                word on these squares will boos points drastically. These are\r\n                found on all four sides of the board and are equidistant from\r\n                the corners.\r\n              </p>\r\n\r\n              <p>\r\n                One Single Use - When using the extra point squares on the\r\n                board, they can only be used one time. If a player places a word\r\n                here, it cannot be used as a multiplier by placing another word\r\n                on the same square.\r\n              </p>\r\n\r\n              <h3>Starting the Game</h3>\r\n\r\n              <p>\r\n                Each player will start their turn with seven tiles from the\r\n                Skrabl bag. There are three options during any turn. The player\r\n                can place a word, they can exchange tiles for new tiles or they\r\n                can choose to pass. In most cases, players will try to place a\r\n                word as the other two options will result in no score.\r\n              </p>\r\n\r\n              <p>\r\n                When a player chooses to exchange tiles, they can choose to\r\n                exchange one or all of the tiles they currently hold. After\r\n                tiles are exchanged, the turn is over and players will have to\r\n                wait until their next turn to place a word on the board.\r\n              </p>\r\n\r\n              <p>\r\n                Players can choose to pass at any time. They will forfeit that\r\n                turn and hope to be able to play the next time. If six\r\n                consecutive passes are made (three each player), the game will\r\n                end and the one with the highest score will win. If there are no\r\n                tiles left in the Skrabl pouch, then the game will end after two\r\n                consecutive passes.\r\n              </p>\r\n\r\n              <h3>The First Word Score</h3>\r\n              <p>\r\n                When the game begins, the first player will place their word on\r\n                the star spin in the centre of the board. The star is a double\r\n                square and will offer a double word score. All players following\r\n                will build their words off of this word, extending the game to\r\n                other squares on the board.\r\n              </p>\r\n\r\n              <h3>Replacing Skrabl Tiles</h3>\r\n              <p>\r\n                Once tiles are played on the board, players will be given new\r\n                tiles from the pouch to replace those. Players will always have\r\n                seven tiles during the game.\r\n              </p>\r\n\r\n              <h3>The Fifty Point Bonus</h3>\r\n              <p>\r\n                Exciting rewards can come when players use all seven tiles to\r\n                create a word on the board. When this happens, players will\r\n                receive a 50 point bonus, in addition to the value of the word.\r\n                If the game is near the end and players are not holding seven\r\n                tiles, they do not get the bonus for using all of their tiles.\r\n                This is only collected for seven letter words placed.\r\n              </p>\r\n\r\n              <h3>The End of a Skrabl Game</h3>\r\n              <p>\r\n                Once all tiles are gone from the bag and a single player has\r\n                placed all of their tiles, the game will end and the player with\r\n                the highest score wins.\r\n              </p>\r\n\r\n              <h3>Tallying Skrabl Scores</h3>\r\n              <p>\r\n                When the game ends, each player will count all points that are\r\n                remaining on their tiles that have not been played. This amount\r\n                will be deducted from the final score.\r\n              </p>\r\n\r\n              <p>\r\n                An added bonus is awarded to the player that ended the game and\r\n                has no remaining tiles. The tile values of all remaining players\r\n                will be added to the score of the player who is out of tiles to\r\n                produce the final score for the game.\r\n              </p>\r\n\r\n              <p>\r\n                The Skrabl player with the highest score after all final scores\r\n                are tallied wins.\r\n              </p>\r\n\r\n              <h3>Accepted Skrabl Words</h3>\r\n              <p>\r\n                Any word that is found in a standard English dictionary can be\r\n                used in the game of Skrabl. Only British English spelling is\r\n                accepted. Plurals and verbs in different forms (e.g. past tense)\r\n                are valid. Words which are usually spelled with a capital letter\r\n                (e.g. names) are not valid.\r\n              </p>\r\n\r\n              <p>\r\n                There are some words that are not allowed to be played and these\r\n                include suffixes, prefixes and abbreviations. Any word that\r\n                requires the use of a hyphen or apostrophe cannot be played in\r\n                the game. Any word that required the use of a capital letter is\r\n                not allowed.\r\n              </p>\r\n\r\n              <p>\r\n                When playing an English version of the game, foreign words are\r\n                not allowed to be placed on the board. However, if the foreign\r\n                word does appear in a standard English dictionary, it is\r\n                allowed. The reason for this is due to the fact that the word is\r\n                spoken enough and is considered part of the English language.\r\n              </p>\r\n            </>\r\n          )}\r\n          {lang === \"de\" && (\r\n            <>\r\n              <h1>Skrabl-Regeln</h1>\r\n              <p>\r\n                Wenn Sie Skrabl spielen, werden ein bis zwei Spieler Spaß haben\r\n                das Spiel. Das Ziel beim Spielen ist es, mehr Punkte als andere\r\n                zu erzielen Spieler. Wenn Wörter auf das Spielbrett gelegt\r\n                werden, werden Punkte gesammelt und jeder Buchstabe, der im\r\n                Spiel verwendet wird, hat einen anderen Punkt Wert. Die\r\n                Hauptstrategie besteht darin, Wörter mit den höchsten Werten zu\r\n                spielen mögliche Punktzahl basierend auf der\r\n                Buchstabenkombination.\r\n              </p>\r\n\r\n              <h3> Das Skrabl-Board </h3>\r\n              <p>\r\n                Eine Skrabl-Karte besteht aus Zellen, die sich in befinden ein\r\n                großes quadratisches Gitter. Das Board bietet 15 Zellen hoch und\r\n                15 Zellen breit. Die im Spiel verwendeten Kacheln passen in jede\r\n                Zelle auf dem Brett.\r\n              </p>\r\n\r\n              <h3> Skrabl-Kacheln </h3>\r\n              <p>\r\n                Es gibt 100 Plättchen, die im Spiel verwendet werden, und 98\r\n                davon werden es tun Buchstaben und Punktwerte enthalten. Es gibt\r\n                2 leere Kacheln, die können als wilde Kacheln verwendet werden,\r\n                um den Platz eines Buchstabens einzunehmen. Wenn ein Leerzeichen\r\n                gespielt wird, bleibt es im Spiel als der Buchstabe, den es\r\n                ersetzt zum.\r\n              </p>\r\n\r\n              <p>\r\n                Verschiedene Buchstaben im Spiel haben verschiedene Punktwerte\r\n                und Dies hängt davon ab, wie selten der Brief ist und wie\r\n                schwierig er sein kann diesen Brief zu legen. Leere Kacheln\r\n                haben keine Punktwerte.\r\n              </p>\r\n\r\n              <h3> Kachelwerte </h3>\r\n              <p>\r\n                Unten sind die Punktwerte für jeden Buchstaben aufgeführt, der\r\n                in a verwendet wird Skrabl Spiel.\r\n              </p>\r\n\r\n              <p> 0 Punkte - Leere Kachel. </p>\r\n\r\n              <p> 1 Punkt - A, E, I, L, N, O, R, S, T und U. </p>\r\n\r\n              <p> 2 Punkte - D und G. </p>\r\n\r\n              <p> 3 Punkte - B, C, M und P. </p>\r\n\r\n              <p> 4 Punkte - F, H, V, W und Y. </p>\r\n\r\n              <p> 5 Punkte - K. </p>\r\n\r\n              <p> 8 Punkte - J und X. </p>\r\n\r\n              <p> 10 Punkte - Q und Z. </p>\r\n\r\n              <h3> Zusätzliche Punktwerte </h3>\r\n              <p>\r\n                Wenn die Spieler auf das Brett schauen, werden sie sehen, dass\r\n                einige Quadrate bieten Multiplikatoren. Sollte eine Kachel auf\r\n                diese Quadrate gelegt werden, ist der Wert von Das Plättchen\r\n                wird mit 2x oder 3x multipliziert. Einige Quadrate werden auch\r\n                Multiplizieren Sie den Gesamtwert des Wortes und nicht nur den\r\n                einzelnen Punkt Wert einer Kachel.\r\n              </p>\r\n\r\n              <p>\r\n                Double Letter Scores - Die hellblauen Zellen auf der Tafel sind\r\n                isoliert und wenn diese verwendet werden, verdoppeln sie den\r\n                Wert von Fliese auf diesem Quadrat platziert.\r\n              </p>\r\n\r\n              <p>\r\n                Triple Letter Score - Die dunkelblaue Zelle auf dem Brett ist es\r\n                wert Verdreifache den Betrag, sodass jedes hier platzierte\r\n                Plättchen mehr Punkte bringt.\r\n              </p>\r\n\r\n              <p>\r\n                Double Word Score - Wenn eine Zelle hellrot ist, ist es a\r\n                Doppelwortzelle und diese verlaufen diagonal auf der Tafel in\r\n                Richtung vier Ecken. Wenn ein Wort auf diese Quadrate gesetzt\r\n                wird, das Ganze Der Wert des Wortes wird verdoppelt.\r\n              </p>\r\n\r\n              <p>\r\n                Triple Word Score - Auf dem dunkelroten Quadrat können die\r\n                Höhepunkte angezeigt werden verdient werden, da dies die\r\n                Wortpunktzahl verdreifacht. Ein Wort aufsetzen Diese Quadrate\r\n                werden die Punkte drastisch erhöhen. Diese sind auf allen zu\r\n                finden vier Seiten der Platte und sind von den Ecken gleich weit\r\n                entfernt.\r\n              </p>\r\n\r\n              <p>\r\n                Einmaliger Gebrauch - Wenn Sie die zusätzlichen Punktquadrate\r\n                auf dem Brett verwenden, Sie können nur einmal verwendet werden.\r\n                Wenn ein Spieler hier ein Wort platziert, ist es kann nicht als\r\n                Multiplikator verwendet werden, indem ein anderes Wort darauf\r\n                gesetzt wird Quadrat.\r\n              </p>\r\n\r\n              <h3> Spiel starten </h3>\r\n\r\n              <p>\r\n                Jeder Spieler beginnt seinen Zug mit sieben Plättchen aus dem\r\n                Skrabl Tasche. In jeder Runde gibt es drei Möglichkeiten. Der\r\n                Spieler kann ein Wort platzieren, sie können Kacheln gegen neue\r\n                Kacheln austauschen oder sie können entscheide dich zu bestehen.\r\n                In den meisten Fällen versuchen die Spieler, ein Wort als zu\r\n                platzieren Die beiden anderen Optionen führen zu keiner\r\n                Punktzahl.\r\n              </p>\r\n\r\n              <p>\r\n                Wenn ein Spieler Steine ​​austauschen möchte, kann er diese\r\n                austauschen eine oder alle Kacheln, die sie derzeit halten. Nach\r\n                Fliesen sind ausgetauscht, der Zug ist vorbei und die Spieler\r\n                müssen warten bis ihre nächste Runde, um ein Wort an die Tafel\r\n                zu setzen.\r\n              </p>\r\n\r\n              <p>\r\n                Spieler können jederzeit passen. Sie werden diese Runde\r\n                verlieren und hoffe, das nächste Mal spielen zu können. Wenn\r\n                sechs aufeinanderfolgende Pässe gemacht werden (drei pro\r\n                Spieler), endet das Spiel und derjenige mit der höchsten\r\n                Punktzahl wird gewinnen. Wenn im Skrabl-Beutel keine Kacheln\r\n                mehr vorhanden sind, endet das Spiel nach zwei aufeinander\r\n                folgenden Durchgängen.\r\n              </p>\r\n\r\n              <h3> Die erste Wortpartitur </h3>\r\n              <p>\r\n                Wenn das Spiel beginnt, setzt der erste Spieler sein Wort auf\r\n                Der Stern dreht sich in der Mitte des Bretts. Der Stern ist ein\r\n                Doppel Quadrat und bietet eine doppelte Wortzahl. Alle Spieler\r\n                folgen werden ihre Worte aus diesem Wort aufbauen und das Spiel\r\n                auf erweitern andere Quadrate auf dem Brett.\r\n              </p>\r\n\r\n              <h3> Ersetzen von Skrabl-Kacheln </h3>\r\n              <p>\r\n                Sobald die Steine ​​auf dem Brett gespielt wurden, erhalten die\r\n                Spieler neue Fliesen aus dem Beutel, um diese zu ersetzen.\r\n                Spieler werden immer haben sieben Plättchen während des Spiels.\r\n              </p>\r\n\r\n              <h3> Der Fünfzig-Punkte-Bonus </h3>\r\n              <p>\r\n                Spannende Belohnungen können kommen, wenn Spieler alle sieben\r\n                Kacheln verwenden Erstelle ein Wort an der Tafel. Wenn dies\r\n                passiert, werden die Spieler Sie erhalten zusätzlich zum Wert\r\n                des Wortes einen Bonus von 50 Punkten. Wenn das Spiel zu Ende\r\n                ist und die Spieler keine sieben halten Kacheln erhalten sie\r\n                nicht den Bonus für die Verwendung aller Kacheln. Dies wird nur\r\n                für Wörter mit sieben Buchstaben gesammelt.\r\n              </p>\r\n\r\n              <h3> Das Ende eines Skrabl-Spiels </h3>\r\n              <p>\r\n                Sobald alle Steine ​​aus der Tasche verschwunden sind und ein\r\n                einzelner Spieler hat Wenn alle ihre Kacheln platziert werden,\r\n                endet das Spiel und der Spieler mit Die höchste Punktzahl\r\n                gewinnt.\r\n              </p>\r\n\r\n              <h3> Skrabl-Ergebnisse zählen </h3>\r\n              <p>\r\n                Wenn das Spiel endet, zählt jeder Spieler alle Punkte, die es\r\n                gibt auf ihren Plättchen bleiben, die nicht gespielt wurden.\r\n                Diese Menge wird vom Endergebnis abgezogen.\r\n              </p>\r\n\r\n              <p>\r\n                Ein zusätzlicher Bonus wird an den Spieler vergeben, der das\r\n                Spiel beendet hat und hat keine verbleibenden Kacheln. Die\r\n                Kachelwerte aller verbleibenden Spieler wird zur Punktzahl des\r\n                Spielers hinzugefügt, der keine Kacheln mehr hat Produziere das\r\n                Endergebnis für das Spiel.\r\n              </p>\r\n\r\n              <p>\r\n                Der Skrabl-Spieler mit der höchsten Punktzahl nach allen\r\n                Endergebnissen sind gewählte Siege.\r\n              </p>\r\n\r\n              <h3> Akzeptierte Skrabl-Wörter </h3>\r\n              <p>\r\n                Jedes Wort, das in einem englischen Standardwörterbuch gefunden\r\n                wird, kann sein im Spiel von Skrabl verwendet. Es wird nur die\r\n                britische Rechtschreibung akzeptiert. Pluralformen und Verben in\r\n                verschiedenen Formen (z. B. Vergangenheitsform) sind gültig.\r\n                Wörter, die normalerweise mit einem Großbuchstaben geschrieben\r\n                werden (z. B. Namen), sind ungültig.\r\n              </p>\r\n\r\n              <p>\r\n                Es gibt einige Wörter, die nicht gespielt werden dürfen und\r\n                diese Fügen Sie Suffixe, Präfixe und Abkürzungen hinzu. Jedes\r\n                Wort das erfordert die Verwendung eines Bindestrichs oder\r\n                Apostrophs kann nicht gespielt werden das Spiel. Jedes Wort, für\r\n                das ein Großbuchstabe erforderlich ist, lautet nicht erlaubt.\r\n              </p>\r\n\r\n              <p>\r\n                Wenn Sie eine englische Version des Spiels spielen, sind\r\n                Fremdwörter darf nicht auf die Tafel gelegt werden. Wenn jedoch\r\n                der Ausländer Das Wort erscheint in einem englischen\r\n                Standardwörterbuch erlaubt. Der Grund dafür ist die Tatsache,\r\n                dass das Wort ist genug gesprochen und gilt als Teil der\r\n                englischen Sprache.\r\n              </p>\r\n            </>\r\n          )}\r\n          {lang === \"tr\" && (\r\n            <>\r\n              <h1> Skrabl Kuralları </h1>\r\n              <p>\r\n                Skrabl oynarken, bir ila iki oyuncu her yerde eğlenecek oyun.\r\n                Oynarken amaç daha fazla puan elde etmektir diğer oyuncular.\r\n                Kelimeler oyun tahtasına yerleştirildikçe, puanlar toplanır ve\r\n                oyunda kullanılan her harf bir farklı nokta değeri. Ana strateji\r\n                şu kelimeleri oynamaktır: kombinasyonuna göre mümkün olan en\r\n                yüksek puana sahip olmak harfler.\r\n              </p>\r\n\r\n              <h3> Skrabl Kurulu </h3>\r\n              <p>\r\n                Skrabl tahtası, büyük bir alanda bulunan hücrelerden\r\n                oluşacaktır. kare ızgara. Kart, 15 hücre yüksekliğinde ve 15\r\n                hücre genişliğinde sunuyor. Oyunda kullanılan karolar tahtadaki\r\n                her hücreye sığacak.\r\n              </p>\r\n\r\n              <h3> Skrabl Karoları </h3>\r\n              <p>\r\n                Oyunda kullanılan 100 karo ve 98 tanesi var harfler ve nokta\r\n                değerleri içerecektir. 2 boş döşeme var herhangi bir mektubun\r\n                yerini almak için vahşi fayans olarak kullanılabilir. Bir boşluk\r\n                oynandığında, oyunda harf olarak kalır onun yerine.\r\n              </p>\r\n\r\n              <p>\r\n                Oyundaki farklı harfler farklı puan değerlerine sahip olacak ve\r\n                bu mektubun ne kadar nadir olduğuna ve ne kadar zor olduğuna\r\n                bağlı olacaktır. bu mektubu koymak olabilir. Boş döşemelerin bir\r\n                anlamı olmayacak değerler.\r\n              </p>\r\n\r\n              <h3> Döşeme Değerleri </h3>\r\n              <p>\r\n                Aşağıda, her harf için kullanılan her harf için nokta değerleri\r\n                verilmiştir. Skrabl oyunu.\r\n              </p>\r\n\r\n              <p> 0 Puan - Boş kutucuk. </p>\r\n\r\n              <p> 1 Nokta - A, E, I, L, N, O, R, S, T ve U. </p>\r\n\r\n              <p> 2 Puan - D ve G. </p>\r\n\r\n              <p> 3 Puan - B, C, M ve P. </p>\r\n\r\n              <p> 4 Puan - F, H, V, W ve Y </p>\r\n\r\n              <p> 5 Puan - K. </p>\r\n\r\n              <p> 8 Puan - J ve X. </p>\r\n\r\n              <p> 10 Puan - Q ve Z. </p>\r\n\r\n              <h3> Ekstra Nokta Değerleri </h3>\r\n              <p>\r\n                Tahtaya bakarken, oyuncular bazı kareler görecek teklif\r\n                çarpanları. Bu karelere bir kiremit yerleştirilirse, döşemenin\r\n                değeri 2x veya 3x ile çarpılır. Bazı kareler sadece kelimenin\r\n                değil, kelimenin toplam değerini de bir döşemenin tek nokta\r\n                değeri.\r\n              </p>\r\n\r\n              <p>\r\n                Çift Mektup Skorları - Karttaki açık mavi hücreler izole\r\n                edildiğinde ve bunlar kullanıldığında, kiremit o kareye\r\n                yerleştirilir.\r\n              </p>\r\n\r\n              <p>\r\n                Üçlü Mektup Puanı - Karttaki koyu mavi hücre üç kat değerinde,\r\n                bu yüzden buraya yerleştirilen karolar daha fazla kazanacak\r\n                puan.\r\n              </p>\r\n\r\n              <p>\r\n                Çift Kelime Puanı - Bir hücre açık kırmızı renkte olduğunda,\r\n                çift ​​kelime hücresi ve bunlar tahtada, dört köşe. Bu karelere\r\n                bir kelime yerleştirildiğinde, kelimenin tüm değeri iki katına\r\n                çıkar.\r\n              </p>\r\n\r\n              <p>\r\n                Üçlü Kelime Puanı - Koyu kırmızı kare, yüksek noktaların Bu,\r\n                kelime skorunu üç katına çıkaracağı için kazanılabilir. Herhangi\r\n                bir yerleştirme bu karelerdeki kelime büyük ölçüde puan\r\n                kazanacak. Bunlar tahta dört tarafında bulunur ve eşit uzaklıkta\r\n                köşeleri.\r\n              </p>\r\n\r\n              <p>\r\n                Tek Kullanımlık - Ekrandaki ekstra nokta karelerini kullanırken\r\n                tahta, sadece bir kez kullanılabilir. Bir oyuncu bir kelime\r\n                yerleştirirse burada, başka bir kelime koyarak çarpan olarak\r\n                kullanılamaz aynı meydanda.\r\n              </p>\r\n\r\n              <h3> Oyuna Başlama </h3>\r\n\r\n              <p>\r\n                Her oyuncu sırayla Skrabl çantası. Herhangi bir dönüş sırasında\r\n                üç seçenek vardır. Oyuncu bir kelime yerleştirebilir, yeni\r\n                fayanslar için fayans değişimi yapabilir veya geçmek\r\n                seçebilirsiniz. Çoğu durumda, oyuncular bir diğer iki seçenek\r\n                olarak hiçbir puan ile sonuçlanmayacaktır.\r\n              </p>\r\n\r\n              <p>\r\n                Bir oyuncu fayans değiştirmeyi seçtiğinde, şu anda sahip\r\n                oldukları karolardan birini veya tümünü değiştirin. Sonra fayans\r\n                değiştirilir, sıra bitti ve oyuncular tahtaya bir kelime\r\n                yerleştirmek için bir sonraki sıraya kadar bekleyin.\r\n              </p>\r\n\r\n              <p>\r\n                Oyuncular istedikleri zaman geçmeyi seçebilirler. Bunu\r\n                kaybedecekler bir dahaki sefere oynayabilmeyi umuyoruz. Eğer\r\n                altı ardışık paslar yapılır (her oyuncu üç), oyun ve en yüksek\r\n                puana sahip olan kazanır. Eğer yoksa Skrabl torbasında kalan\r\n                karolar, oyun iki sonra bitecek ardışık geçişler.\r\n              </p>\r\n\r\n              <h3> İlk Kelime Puanı </h3>\r\n              <p>\r\n                Oyun başladığında, ilk oyuncu sözlerini Tahtanın ortasındaki\r\n                yıldız dönüşü. Yıldız bir çift kare ve çift kelime puanı\r\n                sunacak. Takip eden tüm oyuncular kelimelerini bu kelimeden\r\n                oluşturacak, oyunu tahtadaki diğer kareler.\r\n              </p>\r\n\r\n              <h3> Skrabl Karoları Değiştirme </h3>\r\n              <p>\r\n                Fayans tahtada oynandıktan sonra, oyunculara yeni verilir\r\n                Bunları değiştirmek için kese fayans. Oyuncular her zaman oyun\r\n                sırasında yedi fayans.\r\n              </p>\r\n\r\n              <h3> Elli Puan Bonusu </h3>\r\n              <p>\r\n                Oyuncular yedi kutucuğun hepsini kullanmak için heyecan verici\r\n                ödüller gelebilir. tahtada bir kelime oluşturmak. Bu olduğunda,\r\n                oyuncular kelimenin değerine ek olarak 50 puanlık bonus\r\n                kazanırsınız. Oyun sona yaklaştıysa ve oyuncular yedi tutmuyorsa\r\n                fayans, tüm karolarını kullanma bonusu alamazlar. Bu sadece\r\n                yerleştirilen yedi harfli kelime için toplanır.\r\n              </p>\r\n\r\n              <h3> Skrabl Oyunun Sonu </h3>\r\n              <p>\r\n                Tüm fayanslar çantadan çıktığında ve tek bir oyuncu tüm\r\n                taşlarını yerleştirdiler, oyun bitecek ve oyuncu en yüksek puan\r\n                kazanır.\r\n              </p>\r\n\r\n              <h3> Skrabl Skorlarını Karşılama </h3>\r\n              <p>\r\n                Oyun sona erdiğinde, her oyuncu tüm puanları sayar. oynanmamış\r\n                fayanslarında kalıyor. Bu miktar final skorundan düşülecektir.\r\n              </p>\r\n\r\n              <p>\r\n                Oyunu bitiren oyuncuya ek bir bonus verilir ve kalan döşemeleri\r\n                yok. Kalan tüm oyuncuların döşeme değerleri için fayans dışı\r\n                olan oyuncunun skoruna eklenecek oyunun son skorunu üretir.\r\n              </p>\r\n\r\n              <p>\r\n                Tüm final skorlarından sonra en yüksek puanı alan Skrabl\r\n                oyuncusu kazanılan kazanır.\r\n              </p>\r\n\r\n              <h3> Kabul Edilen Skrabl Kelimeleri </h3>\r\n              <p>\r\n                Standart İngilizce sözlükte bulunan herhangi bir kelime Skrabl\r\n                oyununda kullanılır. Sadece İngiliz İngilizcesi yazım kabul\r\n                edilir. Çoğullar ve farklı formlardaki fiiller (mesela geçmiş\r\n                zaman) geçerlidir. Genellikle büyük harfle yazılan kelimeler\r\n                (mesela adlar) geçerli değildir.\r\n              </p>\r\n\r\n              <p>\r\n                Çalınmasına izin verilmeyen bazı kelimeler var ve bunlar\r\n                sonekleri, önekleri ve kısaltmaları içerir. Herhangi bir kelime\r\n                tire veya kesme işareti kullanılmasını gerektirmez oyun. Büyük\r\n                harf kullanımını gerektiren herhangi bir kelime izin verilmedi.\r\n              </p>\r\n\r\n              <p>\r\n                Oyunun İngilizce versiyonunu oynarken yabancı kelimeler tahtaya\r\n                yerleştirilmesine izin verilmez. Ancak, yabancı kelime standart\r\n                İngilizce sözlükte görünüyor, izin verdi. Bunun nedeni,\r\n                kelimenin yeterince konuşulur ve İngilizce dilinin bir parçası\r\n                olarak kabul edilir.\r\n              </p>\r\n            </>\r\n          )}\r\n          {lang === \"fr\" && (\r\n            <>\r\n              <h1> Règles Skrabl </h1>\r\n              <p>\r\n                Lorsque vous jouez à Skrabl, de un à deux joueurs apprécieront\r\n                le jeu. Le but en jouant est de marquer plus de points que\r\n                d'autres joueurs. Lorsque les mots sont placés sur le plateau de\r\n                jeu, les points sont collectées et chaque lettre utilisée dans\r\n                le jeu aura un valeur de point différente. La stratégie\r\n                principale est de jouer des mots qui avoir le score le plus\r\n                élevé possible en fonction de la combinaison de des lettres.\r\n              </p>\r\n\r\n              <h3> Le tableau Skrabl </h3>\r\n              <p>\r\n                Un tableau Skrabl sera composé de cellules situées dans un grand\r\n                grille carrée. La carte offre 15 cellules de haut et 15 cellules\r\n                de large. Les tuiles utilisées dans le jeu rentreront dans\r\n                chaque cellule du plateau.\r\n              </p>\r\n\r\n              <h3> Tuiles Skrabl </h3>\r\n              <p>\r\n                Il y a 100 tuiles qui sont utilisées dans le jeu et 98 d'entre\r\n                elles contiendra des lettres et des valeurs en points. Il y a 2\r\n                tuiles vierges qui peuvent être utilisées comme tuiles sauvages\r\n                pour remplacer n'importe quelle lettre. Lorsqu'un blanc est\r\n                joué, il restera dans le jeu en tant que lettre il a remplacé.\r\n              </p>\r\n\r\n              <p>\r\n                Différentes lettres du jeu auront différentes valeurs de points\r\n                et cela dépendra de la rareté de la lettre et de sa difficulté\r\n                peut être de déposer cette lettre. Les carreaux vierges n'auront\r\n                aucun intérêt valeurs.\r\n              </p>\r\n\r\n              <h3> Valeurs de tuile </h3>\r\n              <p>\r\n                Vous trouverez ci-dessous les valeurs en points pour chaque\r\n                lettre utilisée dans un Jeu de Skrabl.\r\n              </p>\r\n\r\n              <p> 0 point - tuile vierge. </p>\r\n\r\n              <p> 1 point - A, E, I, L, N, O, R, S, T et U. </p>\r\n\r\n              <p> 2 points - D et G. </p>\r\n\r\n              <p> 3 points - B, C, M et P. </p>\r\n\r\n              <p> 4 points - F, H, V, W et Y. </p>\r\n\r\n              <p> 5 points - K. </p>\r\n\r\n              <p> 8 points - J et X. </p>\r\n\r\n              <p> 10 points - Q et Z. </p>\r\n              <p>\r\n                En regardant le tableau, les joueurs verront que certaines cases\r\n                offrir des multiplicateurs. Si une tuile est placée sur ces\r\n                cases, le la valeur de la tuile sera multipliée par 2x ou 3x.\r\n                Quelques carrés multipliera également la valeur totale du mot et\r\n                pas seulement le valeur de point unique d'une tuile.\r\n              </p>\r\n\r\n              <p>\r\n                Scores en double lettre - Les cellules bleu clair du tableau\r\n                sont isolés et lorsqu'ils sont utilisés, ils doubleront la\r\n                valeur de la tuile placée sur cette case.\r\n              </p>\r\n\r\n              <p>\r\n                Score triple lettre - La cellule bleu foncé du tableau sera vaut\r\n                le triple du montant, donc toute tuile placée ici gagnera plus\r\n                points.\r\n              </p>\r\n\r\n              <p>\r\n                Score de mot double - Lorsqu'une cellule est de couleur rouge\r\n                clair, c'est un double cellule de mot et ceux-ci se dirigent en\r\n                diagonale sur le tableau, vers les quatre coins. Lorsqu'un mot\r\n                est placé sur ces carrés, le la valeur entière du mot sera\r\n                doublée.\r\n              </p>\r\n\r\n              <p>\r\n                Score triple mot - Le carré rouge foncé est l'endroit où les\r\n                points forts peut être gagné car cela triplera le score de mots.\r\n                Placer tout mot sur ces carrés fera huer les points de manière\r\n                drastique. Ceux-ci sont trouvés sur les quatre côtés de la\r\n                planche et sont équidistants de les coins.\r\n              </p>\r\n\r\n              <p>\r\n                Une seule utilisation - Lors de l'utilisation des carrés de\r\n                points supplémentaires sur le conseil d'administration, ils ne\r\n                peuvent être utilisés qu'une seule fois. Si un joueur place un\r\n                mot ici, il ne peut pas être utilisé comme multiplicateur en\r\n                plaçant un autre mot sur le même carré.\r\n              </p>\r\n\r\n              <h3> Démarrer le jeu </h3>\r\n\r\n              <p>\r\n                Chaque joueur commencera son tour avec sept tuiles du Sac\r\n                Skrabl. Il y a trois options à chaque tour. Le joueur peuvent\r\n                placer un mot, ils peuvent échanger des tuiles contre de\r\n                nouvelles tuiles ou ils peut choisir de passer. Dans la plupart\r\n                des cas, les joueurs essaieront de placer un mot car les deux\r\n                autres options n'entraîneront aucun score.\r\n              </p>\r\n\r\n              <p>\r\n                Lorsqu'un joueur choisit d'échanger des tuiles, il peut choisir\r\n                de échanger une ou toutes les tuiles qu'ils détiennent\r\n                actuellement. Après les tuiles sont échangées, le tour est\r\n                terminé et les joueurs devront attendez leur prochain tour pour\r\n                placer un mot au tableau.\r\n              </p>\r\n\r\n              <p>\r\n                Les joueurs peuvent choisir de passer à tout moment. Ils\r\n                perdront cela tourner et espérer pouvoir jouer la prochaine\r\n                fois. Si six des passes consécutives sont effectuées (trois par\r\n                joueur), le jeu fin et celui avec le score le plus élevé\r\n                gagnera. S'il n'y a pas tuiles laissées dans la pochette Skrabl,\r\n                puis le jeu se terminera après deux passes consécutives.\r\n              </p>\r\n\r\n              <h3> Le score du premier mot </h3>\r\n              <p>\r\n                Lorsque le jeu commence, le premier joueur placera sa parole sur\r\n                l'étoile tourne au centre du plateau. L'étoile est un double\r\n                carré et offrira un double score de mots. Tous les joueurs\r\n                suivant construiront leurs mots sur ce mot, étendant le jeu à\r\n                autres carrés sur le plateau.\r\n              </p>\r\n\r\n              <h3> Remplacement des tuiles Skrabl </h3>\r\n              <p>\r\n                Une fois les tuiles jouées sur le plateau, les joueurs recevront\r\n                de nouveaux tuiles de la pochette pour les remplacer. Les\r\n                joueurs auront toujours sept tuiles pendant le jeu.\r\n              </p>\r\n\r\n              <h3> Le bonus de cinquante points </h3>\r\n              <p>\r\n                Des récompenses intéressantes peuvent venir lorsque les joueurs\r\n                utilisent les sept tuiles pour créez un mot au tableau. Lorsque\r\n                cela se produit, les joueurs recevez un bonus de 50 points, en\r\n                plus de la valeur du mot. Si le jeu approche de la fin et que\r\n                les joueurs n'en ont pas sept tuiles, ils n'obtiennent pas le\r\n                bonus pour l'utilisation de toutes leurs tuiles. Ceci n'est\r\n                collecté que pour les mots de sept lettres placés.\r\n              </p>\r\n\r\n              <h3> La fin d'un jeu Skrabl </h3>\r\n              <p>\r\n                Une fois que toutes les tuiles sont parties du sac et qu'un seul\r\n                joueur a placé toutes leurs tuiles, le jeu se terminera et le\r\n                joueur avec le score le plus élevé l'emporte.\r\n              </p>\r\n\r\n              <h3> Comptage des scores de Skrabl </h3>\r\n              <p>\r\n                À la fin du jeu, chaque joueur comptera tous les points restant\r\n                sur leurs tuiles qui n'ont pas été jouées. Cette somme sera\r\n                déduit du score final.\r\n              </p>\r\n\r\n              <p>\r\n                Un bonus supplémentaire est attribué au joueur qui a terminé le\r\n                jeu et n'a pas de tuiles restantes. Les valeurs des tuiles de\r\n                tous les joueurs restants sera ajouté au score du joueur qui n'a\r\n                plus de tuiles pour produire le score final du jeu.\r\n              </p>\r\n\r\n              <p>\r\n                Le joueur Skrabl avec le score le plus élevé après tous les\r\n                scores finaux sont comptés des victoires.\r\n              </p>\r\n\r\n              <h3> Mots Skrabl acceptés </h3>\r\n              <p>\r\n                Tout mot qui se trouve dans un dictionnaire anglais standard\r\n                peut être utilisé dans le jeu de Skrabl. Seule l'orthographe\r\n                anglaise britannique est acceptée. Les pluriels et les verbes\r\n                sous différentes formes (par exemple le passé) sont valides. Les\r\n                mots qui sont généralement écrits avec une majuscule (par\r\n                exemple les noms) ne sont pas valides.\r\n              </p>\r\n\r\n              <p>\r\n                Il y a des mots qui ne peuvent pas être joués et ceux-ci inclure\r\n                des suffixes, des préfixes et des abréviations. Tout mot qui\r\n                nécessite l'utilisation d'un trait d'union ou une apostrophe ne\r\n                peut pas être joué dans le jeu. Tout mot nécessitant\r\n                l'utilisation d'une majuscule est interdit.\r\n              </p>\r\n\r\n              <p>\r\n                Lorsque vous jouez à une version anglaise du jeu, les mots\r\n                étrangers sont ne peut pas être placé sur le plateau. Cependant,\r\n                si l'étranger mot apparaît dans un dictionnaire anglais\r\n                standard, c'est permis. La raison en est que le mot est assez\r\n                parlé et est considéré comme faisant partie de la langue\r\n                anglaise.\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"rulesModal__buttons\">\r\n          <button onClick={closeModal}>Close</button>\r\n        </div>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default RulesModal;\r\n","import React from \"react\";\r\nimport \"../styles/Welcome.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport en from \"../images/ukflag.svg\";\r\nimport de from \"../images/deflag.svg\";\r\nimport fr from \"../images/frflag.svg\";\r\nimport tr from \"../images/tkflag.svg\";\r\n\r\nconst WelcomeScreen = ({\r\n  handleChooseComputer,\r\n  handleChooseOnline,\r\n  setLangEn,\r\n  setLangFr,\r\n  setLangDe,\r\n  setLangTr,\r\n  lang,\r\n}) => {\r\n  return (\r\n    <Fade triggerOnce>\r\n      <div className=\"welcome__main\">\r\n        <div className=\"welcome__menu\">\r\n          {lang === \"en\" && <h2>Select game mode...</h2>}\r\n          {lang === \"tr\" && <h2>Oyun modunu seç...</h2>}\r\n          {lang === \"fr\" && <h2>Sélectionnez le mode de jeu...</h2>}\r\n          {lang === \"de\" && <h2>Wählen Sie den Spielmodus...</h2>}\r\n          <button onClick={handleChooseComputer}>\r\n            {lang === \"en\" && <span>Player</span>}\r\n            {lang === \"tr\" && <span>Oyuncu</span>}\r\n            {lang === \"fr\" && <span>Joueur</span>}\r\n            {lang === \"de\" && <span>Spieler</span>}\r\n            <span className=\"vs\">VS</span>\r\n            <span>SkrablBot</span>\r\n          </button>\r\n          <button onClick={handleChooseOnline}>\r\n            {lang === \"en\" && <span>Player</span>}\r\n            {lang === \"tr\" && <span>Oyuncu</span>}\r\n            {lang === \"fr\" && <span>Joueur</span>}\r\n            {lang === \"de\" && <span>Spieler</span>}\r\n            <span className=\"vs\">VS</span>\r\n            {lang === \"en\" && <span>Player</span>}\r\n            {lang === \"tr\" && <span>Oyuncu</span>}\r\n            {lang === \"fr\" && <span>Joueur</span>}\r\n            {lang === \"de\" && <span>Spieler</span>}\r\n          </button>\r\n        </div>\r\n        <div className=\"language__select\">\r\n          <div onClick={setLangEn}>\r\n            <img className=\"language__icon\" src={en} />\r\n          </div>\r\n          <div onClick={setLangDe}>\r\n            <img className=\"language__icon\" src={de} />\r\n          </div>\r\n          <div onClick={setLangFr}>\r\n            <img className=\"language__icon\" src={fr} />\r\n          </div>\r\n          <div onClick={setLangTr}>\r\n            <img className=\"language__icon\" src={tr} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default WelcomeScreen;\r\n","import React from \"react\";\r\nimport \"../styles/TitleScreen.css\";\r\nimport { Fade, Bounce } from \"react-awesome-reveal\";\r\n\r\nconst TitleScreen = ({ handleStart }) => {\r\n  return (\r\n    <Fade triggerOnce>\r\n      <div className=\"title__main\">\r\n        <Bounce cascade damping={0.2} className=\"title__content\">\r\n          <h1>S</h1>\r\n          <h1>k</h1>\r\n          <h1>r</h1>\r\n          <h1>a</h1>\r\n          <h1>b</h1>\r\n          <h1>l</h1>\r\n        </Bounce>\r\n        <Bounce triggerOnce delay={2000}>\r\n          <button onClick={handleStart} >\r\n            Let's go!\r\n          </button>\r\n        </Bounce>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default TitleScreen;\r\n\r\n","import React from \"react\";\r\nimport \"../styles/LevelSelectScreen.css\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst LevelSelectScreen = ({\r\n  handleStart,\r\n  handleChooseEasy,\r\n  handleChooseNormal,\r\n  handleChooseHard,\r\n  lang,\r\n}) => {\r\n  return (\r\n    <Fade triggerOnce>\r\n      <div className=\"levelSelect__main\">\r\n        <div className=\"levelSelect__menu\">\r\n          <h2>\r\n            {lang === \"en\" && \"Select level...\"}\r\n            {lang === \"tr\" && \"Seviye seç...\"}\r\n            {lang === \"fr\" && \"Choisir le niveau...\"}\r\n            {lang === \"de\" && \"Stufe auswählen...\"}\r\n          </h2>\r\n          <button onClick={handleChooseEasy}>\r\n            {lang === \"en\" && \"Easy\"}\r\n            {lang === \"tr\" && \"Kolay\"}\r\n            {lang === \"fr\" && \"Facile\"}\r\n            {lang === \"de\" && \"Einfach\"}\r\n          </button>\r\n          <button onClick={handleChooseNormal}>\r\n            {lang === \"en\" && \"Normal\"}\r\n            {lang === \"tr\" && \"Normal\"}\r\n            {lang === \"fr\" && \"Normal\"}\r\n            {lang === \"de\" && \"Normal\"}\r\n          </button>\r\n          <button onClick={handleChooseHard}>\r\n            {lang === \"en\" && \"Hard\"}\r\n            {lang === \"tr\" && \"Zor\"}\r\n            {lang === \"fr\" && \"Dur\"}\r\n            {lang === \"de\" && \"Schwer\"}\r\n          </button>\r\n        </div>\r\n        <button onClick={handleStart}>\r\n          {lang === \"en\" && \"Back\"}\r\n          {lang === \"tr\" && \"Geri git\"}\r\n          {lang === \"fr\" && \"Retourner\"}\r\n          {lang === \"de\" && \"Geh zurück\"}\r\n        </button>\r\n      </div>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default LevelSelectScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Login from \"./components/Login\";\r\nimport Header from \"./components/Header\";\r\nimport Players from \"./components/Players\";\r\nimport InviteScreen from \"./components/InviteScreen\";\r\nimport UserBusy from \"./components/UserBusy\";\r\nimport GameScreen from \"./components/GameScreen\";\r\nimport NotificationModal from \"./components/NotificationModal\";\r\nimport RulesModal from \"./components/RulesModal\";\r\nimport \"./styles/global.css\";\r\nimport GameModeScreen from \"./components/GameModeScreen\";\r\nimport TitleScreen from \"./components/TitleScreen\";\r\nimport LevelSelectScreen from \"./components/LevelSelectScreen\";\r\n\r\nconst App = () => {\r\n  const [currentComponent, setCurrentComponent] = useState(\"TitleScreen\");\r\n  const [notification, setNotification] = useState(null);\r\n  const [user, setUser] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [invitedPlayer, setInvitedPlayer] = useState(null);\r\n  const [gameId, setGameId] = useState(\"\");\r\n  const [gameData, setGameData] = useState(null);\r\n  const [gameMode, setGameMode] = useState(null);\r\n  const [currentPlayer, setCurrentPlayer] = useState(); // 0 means he was the host and his data is stored as player1 at the backend. 1 means he is player2\r\n  const [socket, setSocket] = useState(null);\r\n  const [inviteSent, setInviteSent] = useState(false);\r\n  const [viewRules, setViewRules] = useState(false);\r\n  const [viewChat, setViewChat] = useState(false);\r\n  const [newChatMsg, setNewChatMsg] = useState(false);\r\n  const [lang, setLang] = useState(\"en\");\r\n  const [level, setLevel] = useState(\"normal\");\r\n\r\n  useEffect(() => {\r\n    if (gameMode === \"Computer\") {\r\n      setCurrentPlayer(0);\r\n      setCurrentComponent(\"LevelSelectScreen\");\r\n    }\r\n    if (gameMode === \"Online\") {\r\n      setSocket(io(\"http://localhost:4001\"));\r\n      setCurrentComponent(\"Login\");\r\n    }\r\n  }, [gameMode]);\r\n\r\n  const handleCloseNotificationModal = () => {\r\n    setNotification(null);\r\n  };\r\n\r\n  const handleChooseComputer = () => {\r\n    setGameMode(\"Computer\");\r\n  };\r\n\r\n  const handleChooseOnline = () => {\r\n    setGameMode(\"Online\");\r\n  };\r\n\r\n  const handleClickRules = () => {\r\n    setViewRules(!viewRules);\r\n  };\r\n\r\n  const handleClickChat = () => {\r\n    setViewChat(!viewChat);\r\n    setNewChatMsg(false);\r\n  };\r\n\r\n  const handleNewChatMsg = () => {\r\n    setNewChatMsg(true);\r\n  };\r\n\r\n  const resetChatMsg = () => {\r\n    setNewChatMsg(false);\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setGameMode(null);\r\n    setCurrentComponent(\"GameModeScreen\");\r\n  };\r\n\r\n  const setLangEn = () => {\r\n    setLang(\"en\");\r\n  };\r\n  const setLangFr = () => {\r\n    setLang(\"fr\");\r\n  };\r\n  const setLangDe = () => {\r\n    setLang(\"de\");\r\n  };\r\n  const setLangTr = () => {\r\n    setLang(\"tr\");\r\n  };\r\n\r\n  const handleChooseEasy = () => {\r\n    setLevel(\"easy\");\r\n    setCurrentComponent(\"GameScreen\");\r\n  };\r\n\r\n  const handleChooseNormal = () => {\r\n    setLevel(\"normal\");\r\n    setCurrentComponent(\"GameScreen\");\r\n  };\r\n\r\n  const handleChooseHard = () => {\r\n    setLevel(\"hard\");\r\n    setCurrentComponent(\"GameScreen\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      {currentComponent !== \"TitleScreen\" && (\r\n        <Header\r\n          currentComponent={currentComponent}\r\n          newChatMsg={newChatMsg}\r\n          handleStart={handleStart}\r\n          handleClickRules={handleClickRules}\r\n          handleClickChat={handleClickChat}\r\n          gameMode={gameMode}\r\n        />\r\n      )}\r\n      {currentComponent === \"TitleScreen\" && (\r\n        <TitleScreen handleStart={handleStart} />\r\n      )}\r\n      {currentComponent === \"GameModeScreen\" && (\r\n        <GameModeScreen\r\n          handleChooseOnline={handleChooseOnline}\r\n          handleChooseComputer={handleChooseComputer}\r\n          setLangEn={setLangEn}\r\n          setLangFr={setLangFr}\r\n          setLangDe={setLangDe}\r\n          setLangTr={setLangTr}\r\n          lang={lang}\r\n        />\r\n      )}\r\n      {currentComponent === \"LevelSelectScreen\" && (\r\n        <LevelSelectScreen\r\n          handleStart={handleStart}\r\n          handleChooseEasy={handleChooseEasy}\r\n          handleChooseNormal={handleChooseNormal}\r\n          handleChooseHard={handleChooseHard}\r\n          lang={lang}\r\n        />\r\n      )}\r\n      {currentComponent === \"Login\" && (\r\n        <Login\r\n          handleStart={handleStart}\r\n          setCurrentComponent={setCurrentComponent}\r\n          setUser={setUser}\r\n          socket={socket}\r\n          setPlayers={setPlayers}\r\n          setInvitedPlayer={setInvitedPlayer}\r\n          setGameId={setGameId}\r\n          setInviteSent={setInviteSent}\r\n          setCurrentPlayer={setCurrentPlayer}\r\n          setNotification={setNotification}\r\n          setGameData={setGameData}\r\n          lang={lang}\r\n        />\r\n      )}\r\n      {currentComponent === \"Players\" && (\r\n        <Players\r\n          handleStart={handleStart}\r\n          players={players}\r\n          setPlayers={setPlayers}\r\n          socket={socket}\r\n          user={user}\r\n          setCurrentComponent={setCurrentComponent}\r\n          setInvitedPlayer={setInvitedPlayer}\r\n          setGameId={setGameId}\r\n          setGameData={setGameData}\r\n          setNotification={setNotification}\r\n          setCurrentPlayer={setCurrentPlayer}\r\n          lang={lang}\r\n        />\r\n      )}\r\n      {currentComponent === \"InviteScreen\" && (\r\n        <InviteScreen\r\n          user={user}\r\n          setInvitedPlayer={setInvitedPlayer}\r\n          setCurrentComponent={setCurrentComponent}\r\n          invitedPlayer={invitedPlayer}\r\n          gameId={gameId}\r\n          setGameData={setGameData}\r\n          socket={socket}\r\n          setCurrentPlayer={setCurrentPlayer}\r\n          inviteSent={inviteSent}\r\n          setInviteSent={setInviteSent}\r\n          lang={lang}\r\n        />\r\n      )}\r\n      {currentComponent === \"GameScreen\" && (\r\n        <GameScreen\r\n          resetChatMsg={resetChatMsg}\r\n          handleNewChatMsg={handleNewChatMsg}\r\n          handleClickChat={handleClickChat}\r\n          viewChat={viewChat}\r\n          user={user}\r\n          invitedPlayer={invitedPlayer} //basically, the opponent\r\n          setNotification={setNotification}\r\n          setCurrentComponent={setCurrentComponent}\r\n          setCurrentPlayer={setCurrentPlayer}\r\n          currentPlayer={currentPlayer}\r\n          gameData={gameData}\r\n          socket={socket}\r\n          gameMode={gameMode}\r\n          lang={lang}\r\n          level={level}\r\n          setGameMode={setGameMode}\r\n        />\r\n      )}\r\n      {currentComponent === \"UserBusy\" && (\r\n        <UserBusy socket={socket} lang={lang} />\r\n      )}\r\n      {notification && (\r\n        <NotificationModal\r\n          notification={notification}\r\n          handleCloseNotificationModal={handleCloseNotificationModal}\r\n          lang={lang}\r\n        />\r\n      )}\r\n      {viewRules && <RulesModal lang={lang} closeModal={handleClickRules} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}